diff -Naur xsim-0.3.9.4.orig/plugins/IMs/jianpin/simpleimc.h xsim-0.3.9.4/plugins/IMs/jianpin/simpleimc.h
--- xsim-0.3.9.4.orig/plugins/IMs/jianpin/simpleimc.h	2002-10-22 18:01:04.000000000 +0900
+++ xsim-0.3.9.4/plugins/IMs/jianpin/simpleimc.h	2007-08-20 23:15:06.000000000 +0900
@@ -45,7 +45,7 @@
 	uint16_t access_count;
 	wchar_t w[MAX_WORD_LEN + 1];
 
-	size_t ac_size() { return (uint32_t) w - (uint32_t)&access_count; }
+	size_t ac_size() { return (size_t) w - (size_t)&access_count; }
 	size_t size(){ return ac_size() + wcslen(w) * sizeof(wchar_t); }
 	void copy(struct Word_Rec_tag * val) { memcpy(this, val, sizeof(Word_Rec_tag));}
 }Word_Rec;
diff -Naur xsim-0.3.9.4.orig/plugins/IMs/table/tableimc.h xsim-0.3.9.4/plugins/IMs/table/tableimc.h
--- xsim-0.3.9.4.orig/plugins/IMs/table/tableimc.h	2002-09-13 20:34:03.000000000 +0900
+++ xsim-0.3.9.4/plugins/IMs/table/tableimc.h	2007-08-20 23:15:47.000000000 +0900
@@ -23,7 +23,7 @@
 	uint8_t sort_index;
 	wchar_t w[MAX_WORD_LEN + 1];
 
-	size_t si_size() { return (uint32_t) w - (uint32_t)&sort_index; }
+	size_t si_size() { return (size_t) w - (size_t)&sort_index; }
 	size_t size(){ return si_size() + (wcslen(w) + 1) * sizeof(wchar_t); }
 	void copy(struct Word_Rec_tag * val) { memcpy(this, val, sizeof(Word_Rec_tag));}
 }Word_Rec;
diff -Naur xsim-0.3.9.4.orig/xsim/ic.cpp xsim-0.3.9.4/xsim/ic.cpp
--- xsim-0.3.9.4.orig/xsim/ic.cpp	2002-10-01 14:41:23.000000000 +0900
+++ xsim-0.3.9.4/xsim/ic.cpp	2007-08-20 23:16:11.000000000 +0900
@@ -101,7 +101,7 @@
 	on_stat = 0;
 }
 
-int TIC::alive()
+long TIC::alive()
 {
-	return (int)im;
+	return (long)im;
 }
diff -Naur xsim-0.3.9.4.orig/xsim/ic.h xsim-0.3.9.4/xsim/ic.h
--- xsim-0.3.9.4.orig/xsim/ic.h	2002-07-15 00:14:24.000000000 +0900
+++ xsim-0.3.9.4/xsim/ic.h	2007-08-20 23:16:52.000000000 +0900
@@ -76,14 +76,14 @@
 	void set_im(TIM * val);
 
 	TIMC * get_imc();
-	int has_imc() { return (int)imc; }
+	long has_imc() { return (long)imc; }
 
 	void init(int init_mode, TIM * val);
 
 	static TIC * get_focus_ic() { return focused_ic; }
 	IC * get_IC() { return &ic_; };
 	
-	int alive();
+	long alive();
 	Window get_client_win() { return ic_.client_win; }
 
 	int has_focus() { return (focused_ic == this); }
