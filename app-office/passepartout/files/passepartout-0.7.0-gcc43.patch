--- a/src/fonts/afm.cc
+++ b/src/fonts/afm.cc
@@ -10,6 +10,8 @@
 #include "util/warning.h"
 #include "util/stringutil.h"
 
+#include <limits>
+
 using std::string;
 
 class font::AFMetrics::GlyphData {
--- a/src/fonts/fontmanager.cc
+++ b/src/fonts/fontmanager.cc
@@ -14,6 +14,8 @@
 #include "util/filesys.h"
 #include "util/warning.h"
 
+#include <memory>
+
 font::FontManager* font::FontManager::_instance = 0;
 // StaticMutex can, unlike regular Mutex, be created before the call
 // to thread_init
--- a/src/pptout/document/rasterframe.cc
+++ b/src/pptout/document/rasterframe.cc
@@ -12,6 +12,8 @@
 #include "ps/misc.h"
 #include "pptout/config.h" // Todo
 
+#include <ctime>
+
 RasterFrame::RasterFrame(const ElementWrap& xml, Group *parent)
   : BasicFrame(xml, parent),
     association(xml.get_filename("file")),
--- a/src/ps/encode.h
+++ b/src/ps/encode.h
@@ -8,6 +8,7 @@
 #include <iostream>
 #include <string>
 #include <vector>
+#include <cstring>
 
 // Standard PostScript encoding filters
 
--- a/src/ps/examinepdf.cc
+++ b/src/ps/examinepdf.cc
@@ -5,6 +5,7 @@
 #include <fstream>
 #include <cassert>		// Todo: other assert!
 #include <iostream>
+#include <cstdlib>
 
 void usage() {}
 
--- a/src/ps/pdf.cc
+++ b/src/ps/pdf.cc
@@ -15,6 +15,7 @@
 #include <stdexcept>
 #include <glibmm/convert.h>
 #include <fstream>
+#include <typeinfo>
 
 
 namespace {
--- a/src/util/filesys.cc
+++ b/src/util/filesys.cc
@@ -14,6 +14,9 @@
 #include <sys/types.h>
 #endif
 
+#include <cstring>
+#include <stdlib.h>
+
 using std::string;
 
 ClibException::ClibException(const string& msg)
--- a/src/util/vector.h
+++ b/src/util/vector.h
@@ -5,6 +5,7 @@
 ///
 #include <algorithm> // max
 #include <cmath> // sqrt
+#include <ostream>
 template<class C> C sqr(const C& c) { return c*c; }
 
 template <class C>
--- a/src/util/tempfile.cc
+++ b/src/util/tempfile.cc
@@ -8,6 +8,9 @@
 #include <stdexcept>
 #include <unistd.h>
 
+#include <cstring>
+#include <stdlib.h>
+
 namespace {
   std::string get_tmplate(std::string base) {
     base += "XXXXXX";
