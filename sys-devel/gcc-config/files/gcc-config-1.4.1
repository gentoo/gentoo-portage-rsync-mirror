#!/bin/bash
# Copyright 1999-2011 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/sys-devel/gcc-config/files/gcc-config-1.4.1,v 1.12 2011/12/07 05:42:19 vapier Exp $

trap ":" INT QUIT TSTP

argv0=${0##*/}
source /etc/init.d/functions.sh || {
	echo "${argv0}: Could not source /etc/init.d/functions.sh!"
	exit 1
}
esyslog() { :; }
umask 022

# *BSD are plain stupid ... copy a GNU extension but don't just copy it,
# change it so it works differently.  Wish Darwin did selective evolution
# on software developers.
SED=$(type -P gsed)
SED=${SED:-$(type -P sed)}

GENTOO_LIBDIR="@GENTOO_LIBDIR@"
[[ ${GENTOO_LIBDIR} == @*@ ]] && GENTOO_LIBDIR="lib"

usage() {
cat << "USAGE_END"
Usage: gcc-config [options] [CC Profile]
Change the current cc/gcc profile, or give info about profiles.

Options:
  -C, --nocolor              Disable color output
  -O, --use-old              Use the old profile if one was selected.
  -f, --force                Make sure all config files are regenerated.
  -P, --use-portage-chost    Only set to given profile if its CHOST is the 
                             same as that set for portage in /etc/make.conf
                             (or one of other portage config files...).
  -c, --get-current-profile  Print current used gcc profile.
  -l, --list-profiles        Print a list of available profiles.
  -S, --split-profile        Split profiles into their components
  -E, --print-environ        Print environment that can be used to setup the
                             current gcc profile, or a specified one.
  -B, --get-bin-path         Print path where binaries of the given/current
                             profile are located.
  -L, --get-lib-path         Print path where libraries of the given/current
                             profile are located.
  -X, --get-stdcxx-incdir    Print path where g++ include files of the
                             given/current profile are located.

Profile names are of the form:  <CHOST>-<gcc version>
For example:                    i686-pc-linux-gnu-3.2.1
USAGE_END
	exit $1
}
[[ $# -lt 1 ]] && usage 1

try_real_hard_to_find_CHOST() {
	#
	# First we read make.conf
	#

	local varname=${1:-CHOST}
	local conf=${ROOT}/etc/make.conf
	local ret=$(source "${conf}" 2>/dev/null ; echo ${!varname})
	if [[ -z ${ret} ]] ; then
		# newer portage supports spaces between the var and =
		# CHOST     =  "this-is-retarded"
		ret=$(eval $(
			sed -n \
				-e 's:[[:space:]]::g' \
				-e "/^${varname}=/p" \
				"${conf}"
			) ; echo ${!varname}
		)
	fi

	if [[ -n ${ret} ]] ; then
		echo ${ret}
		return 0
	fi

	#
	# Then we try /etc/env.d/gcc/config-${CTARGET}
	#
	if [[ -s ${ROOT}/etc/env.d/gcc/config-${CTARGET} ]] ; then
		ret=$(split_gcc_ver $(eval $(<"${ROOT}"/etc/env.d/gcc/config-${CTARGET}) ; echo ${CURRENT}))
		echo ${ret% *}
	fi
}

get_real_chost() {
	[[ -n ${REAL_CHOST} ]] && return 0

	# shortcut for switching compilers in a cross chroot
	if [[ -n ${CHOST} && ${ROOT} != "/" ]] ; then
		REAL_CHOST=${CHOST}
		return 0
	fi

	# make sure portage isnt broken
	if python -V &>/dev/null ; then
		export REAL_CHOST=$(env -i portageq envvar CHOST 2>/dev/null)
	else
		ewarn "Python seems to be broken, attempting to locate CHOST ourselves ..."
		export REAL_CHOST=$(try_real_hard_to_find_CHOST)
	fi

	if [[ -z ${REAL_CHOST} ]] ; then
		eerror "${argv0}: Could not get portage CHOST!"
		eerror "${argv0}: You should verify that CHOST is set in one of these places:"
		eerror "${argv0}:  - ${ROOT}/etc/make.conf"
		eerror "${argv0}:  - active environment"
		exit 1
	fi
}

is_cross_compiler() {
	get_real_chost
	[[ ${CC_COMP/${REAL_CHOST}} == ${CC_COMP} ]]
}

# bool files_exists(search_path, files)
#	Return shell true if the specified files exist.
#	Files with relative paths are searched for in search_path.
#	Both lists are : delimited.
files_exist() {
	local p f ret old_IFS
	local paths=$1 files=$2

	old_IFS=${IFS}
	export IFS=":"

	ret=0
	for f in ${files} ; do
		if [[ ${f} == /* ]] ; then
			[[ ! -f ${f} ]] && ret=1 && break
		else
			# make sure the file exists in at least
			# one of the specified paths
			ret=1
			for p in ${paths} ; do
				[[ -f ${p}/${f} ]] && ret=0 && break
			done
			[[ ${ret} == 1 ]] && break
		fi
	done

	export IFS=${old_IFS}
	if [[ ${ret} == 1 ]] ; then
		ewarn "Could not locate '${f}' in '${paths}'"
	fi
	return ${ret}
}

switch_profile() {
	local MY_LDPATH=
	local GCC_PROFILES=
	local OLD_CC_COMP=
	local GCC_PATH=

	if [[ $(id -u) != "0" ]] ; then
		eerror "${argv0}: Must be root."
		exit 1
	fi

	if is_cross_compiler ; then
		ebegin "Switching cross-compiler to ${CC_COMP}"
	else
		ebegin "Switching native-compiler to ${CC_COMP}"
	fi

	if ! is_cross_compiler ; then
		# Order our profiles to have the default first ...
		# We do this so that we can have them ordered with default
		# first in /etc/ld.so.conf, as the logical is that all
		# compilers for default CHOST will be used to compile stuff,
		# and thus we want all their lib paths in /etc/ld.so.conf ...
		get_real_chost
		GCC_PROFILES=$(LC_ALL="C" ls -r ${GCC_ENV_D}/${REAL_CHOST}-*)
		GCC_PROFILES="${GCC_ENV_D}/${CC_COMP} ${GCC_PROFILES}"

		# Extract all LDPATH's for our CHOST
		MY_LDPATH=""
		for x in ${GCC_PROFILES} ; do
			if [[ -f ${x} ]] ; then
				LDPATH=$(source "${x}"; echo ${LDPATH})

				# Handle LDPATH's that have multiple directories
				local old_IFS=${IFS}
				export IFS=":"
				local sub_ldpath=
				for sub_ldpath in ${LDPATH} ; do
					if [[ -d ${sub_ldpath} ]] ; then
						if [[ ${MY_LDPATH/:${sub_ldpath}} == ${MY_LDPATH} ]] ; then
							MY_LDPATH="${MY_LDPATH}:${sub_ldpath}"
						fi
					fi
				done
				export IFS=${old_IFS}
			fi
		done
		MY_LDPATH="${MY_LDPATH:1}" # trim leading :
	fi

	# Translate old PATH/ROOTPATH to GCC_PATH
	cp -p "${GCC_ENV_D}/${CC_COMP}" "${GCC_ENV_D}/${CC_COMP}.gcc-config-ref" || return 1
	GCC_PATH=$(
		unset GCC_PATH PATH ROOTPATH
		source "${GCC_ENV_D}/${CC_COMP}"
		echo ${GCC_PATH:-${PATH:-${ROOTPATH}}}
	)
	${SED} -i \
		-e '/^PATH=/d' \
		-e '/^ROOTPATH=/d' \
		-e '/^GCC_PATH=/d' \
		"${GCC_ENV_D}/${CC_COMP}" || return 1
	echo "GCC_PATH=\"${GCC_PATH}\"" >> "${GCC_ENV_D}/${CC_COMP}" || return 1
	touch -r "${GCC_ENV_D}/${CC_COMP}.gcc-config-ref" "${GCC_ENV_D}/${CC_COMP}" || return 1
	rm -f "${GCC_ENV_D}/${CC_COMP}.gcc-config-ref" || return 1

	# Setup things properly again for this profile
	unset GCC_SPECS LDPATH
	source "${GCC_ENV_D}/${CC_COMP}"
	OLD_CC_COMP=$(get_current_profile)

	# What kind of env.d entry are we going to generate ?
	if is_cross_compiler ; then
		echo "PATH=\"${GCC_PATH}\"" > "${ENV_D}/05gcc-${CTARGET}"
		echo "ROOTPATH=\"${GCC_PATH}\"" >> "${ENV_D}/05gcc-${CTARGET}"
		echo "CURRENT=${CC_COMP}" > "${GCC_ENV_D}/config-${CTARGET}"
	else
		# Pass all by default
		awk '!/^(STDCXX_INCDIR|LDPATH|CC|CXX|CTARGET|GCCBITS|GCC_SPECS|GCC_PATH)=/ {print $0}' \
			"${GCC_ENV_D}/${CC_COMP}" > "${ENV_D}/05gcc-${CTARGET}"
		echo "LDPATH=\"${MY_LDPATH}\"" >> "${ENV_D}/05gcc-${CTARGET}"
		echo "PATH=\"${GCC_PATH}\"" >> "${ENV_D}/05gcc-${CTARGET}"
		echo "ROOTPATH=\"${GCC_PATH}\"" >> "${ENV_D}/05gcc-${CTARGET}"
		if [[ -n ${GCC_SPECS} ]] ; then
			if files_exist ${MY_LDPATH} ${GCC_SPECS} ; then
				echo "GCC_SPECS=\"${GCC_SPECS}\"" >> "${ENV_D}/05gcc-${CTARGET}"
			else
				echo
				ewarn "Your GCC spec configurations are broken."
				ewarn "Please re-emerge gcc."
				echo
			fi
		else
			# People need to rebuild their gcc or setting GCC_SPECS to
			# "" will cause issues again :(
			if [[ ${ROOT} != "/" ]] ; then
				echo "GCC_SPECS=\"\"" >> "${ENV_D}/05gcc-${CTARGET}"
			else
				if ! GCC_SPECS="" /usr/bin/gcc -v &>/dev/null ; then
					echo
					ewarn "Your gcc has a bug with GCC_SPECS."
					ewarn "Please re-emerge gcc."
					ewarn "http://bugs.gentoo.org/68395"
					echo
				else
					echo "GCC_SPECS=\"\"" >> "${ENV_D}/05gcc-${CTARGET}"
				fi
			fi
		fi

		echo "CURRENT=${CC_COMP}" > "${GCC_ENV_D}/config-${CTARGET}"

		# Help out the gcc wrapper
		rm -f "${GCC_ENV_D}/NATIVE" "${GCC_ENV_D}/.NATIVE"
		ln -sf ${CC_COMP} "${GCC_ENV_D}/.NATIVE"

		# Punt old files
		rm -f "${ENV_D}/05gcc"
		rm -f "${ENV_D}/05gcc-${CTARGET}"-*
		rm -f "${GCC_ENV_D}/config"
		rm -f "${GCC_ENV_D}/config-${CTARGET}"-*
	fi

	# Find the bin wrapper
	local wrapper
	for wrapper in ${GENTOO_LIBDIR} lib lib64 lib32 lib ; do
		wrapper="${ROOT}usr/${wrapper}/misc/gcc-config"
		[[ -e ${wrapper} ]] && break
	done

	# Update the wrappers for this profile
	for x in {,${CTARGET}-}{cpp,cc,gcc,c++,g++,f77,g77,gcj,gcjh,gcov,gdc,gdmd,gfortran} ; do
		# Obviously don't want to touch native stuff for cross-compilers
		[[ ${x} != ${CTARGET}-* ]] && is_cross_compiler && continue

		# Make sure we have no stale wrappers
		rm -f "${ROOT}/usr/bin/${x}"
		[[ ${x:${#x}-3} == "gcc" || ${x:${#x}-3} == "g++" ]] \
			&& rm -f "${ROOT}/usr/bin/${x}"{32,64}

		# Only install a wrapper if the binary exists ...
		# We want to figure out the 'reference file' for each 
		# wrapper (the binary we're 'wrapping') so that we can 
		# sync mtimes together.  This makes things like ccache
		# happy.  See Bug #70548 for more info.
		local ref
		case ${x} in
			cc)  ref=${ROOT}/${GCC_PATH}/gcc;;
			f77) ref=${ROOT}/${GCC_PATH}/g77;;
			*)   ref=${ROOT}/${GCC_PATH}/${x};;
		esac
		if [[ -x ${ref} ]] ; then
			cp -f "${wrapper}" "${ROOT}/usr/bin/${x}"
			touch -r "${ref}" "${ROOT}/usr/bin/${x}"

			# Install 32bit and 64bit wrappers if need be
			# This should probably get folded back into the wrapper ...
			if [[ ${x:${#x}-3} == "gcc" ]] || [[ ${x:${#x}-3} == "g++" ]] ; then
				for bits in ${GCCBITS} ; do
					cp -f "${wrapper}" "${ROOT}/usr/bin/${x}${bits}"
				done
			fi
		fi
	done
	# legacy cruft, make sure we dont leave it laying around #143205
	rm -f "${ROOT}/usr/bin/${CTARGET}-cc"
	# Only install cpp if switching to a native one
	if ! is_cross_compiler && [[ ${CTARGET} != *-solaris* ]] ; then
		rm -f "${ROOT}/lib/cpp"
		cp -f "${wrapper}" "${ROOT}/lib/cpp"
	fi

	# Relocate random crap
	if ! is_cross_compiler ; then
		if [[ -e ${ROOT}/usr/${GENTOO_LIBDIR}/pkgconfig/libgcj-${CC_COMP_VERSION}.pc ]] ; then
			local mver=${CC_COMP_VERSION:0:3}
			for x in "" "-${mver}" ; do
				x="${ROOT}/usr/lib/pkgconfig/libgcj${x}.pc"
				rm -f "${x}"
				ln -s libgcj-${CC_COMP_VERSION}.pc "${x}"
			done
		fi
	fi

	# We need to make sure that libgcc_s.so / libunwind.so make it into /lib.
	# On many systems (x86/amd64/etc...), this will probably never matter, 
	# but on other systems (arm/mips/etc...), this is quite critical.
	# http://bugs.gentoo.org/60190
	#
	# The funky move magic is required for proper updating of in-use files.
	if ! is_cross_compiler ; then
		# Need to cut out extra paths in multilib case and pray the first path
		# is the "root" multilib path ... maybe some day change this to use
		# `gcc -print-file-name` ...
		LDPATH=${LDPATH%%:*}
		for multilib in $("${ROOT}/${GCC_PATH}"/gcc -print-multi-lib); do
			multiarg=${multilib#*;}
			multiarg=${multiarg/@/-}
			multilibdir=${multilib%;*}
			libdir="lib/"$("${ROOT}/${GCC_PATH}"/gcc ${multiarg} -print-multi-os-directory)
			if mkdir -p "${ROOT}/${libdir}"/.gcc.config.new ; then
				for gcclib in gcc_s unwind ; do
					if [[ -n $(ls "${ROOT}/${LDPATH}/${multilibdir}"/lib${gcclib}.so.* 2>/dev/null) ]]; then
						cp -pP "${ROOT}/${LDPATH}/${multilibdir}"/lib${gcclib}.so.* "${ROOT}/${libdir}"/.gcc.config.new/
						# no need to sanity remove this as the `mv` should take
						# care of it.  we also need this step to be completly atomic
						# for systems that have even `mv` linked against libgcc_s.so.
						# http://bugs.gentoo.org/150257
						#rm -f "${ROOT}/${libdir}"/lib${gcclib}.so*
						mv -f "${ROOT}/${libdir}"/.gcc.config.new/* "${ROOT}/${libdir}"/
					fi
				done
				rmdir "${ROOT}/${libdir}"/.gcc.config.new
			fi
		done
		unset multilib
		unset multilibdir
		unset multiarg
		unset libdir
	fi

	if [[ ${ROOT} == "/" ]] && [[ ${OLD_CC_COMP} != ${CC_COMP} || ${FORCE} == "yes" ]] ; then
		# in case python is broken ...
		if ! env-update ; then
			echo ""
			ewarn "env-update failed to work properly; making sure ld.so.conf paths"
			ewarn "are setup properly.  Please rerun gcc-config with the -f option."
			echo ""
			grep -h ^LDPATH= "${ROOT}"/etc/env.d/05gcc-${CTARGET} \
				| sed -e 's:^LDPATH=::' -e 's:"::g' -e 's|:|\n|g' \
				>> /etc/ld.so.conf
			ldconfig
		fi
	fi

	eend 0

	if [[ ${ROOT} == "/" ]] && [[ ${OLD_CC_COMP} != ${CC_COMP} ]] ; then
		echo
		ewarn "If you intend to use the gcc from the new profile in an already"
		ewarn "running shell, please remember to do:"
		echo
		ewarn "  . /etc/profile"
		echo
	fi

	return 0
}

get_current_profile() {
	local conf="${GCC_ENV_D}/config"
	if [[ ! -f ${conf} ]] ; then
		conf="${GCC_ENV_D}/config-${CTARGET}"
	elif [[ -n ${CC_COMP} ]] && is_cross_compiler ; then
		conf="${conf}-${CC_COMP}"
	fi

	if [[ ! -f ${conf} ]] ; then
		eerror "${argv0}: No gcc profile is active!"
		return 1
	fi

	CURRENT=$(source "${conf}"; echo ${CURRENT})

	if [[ -z ${CURRENT} ]] ; then
		eerror "${argv0}: No gcc profile is active!"
		return 1
	elif [[ ! -f ${GCC_ENV_D}/${CURRENT} ]] ; then
		eerror "${argv0}: Active gcc profile is invalid!"
		return 1
	fi

	echo "${CURRENT}"

	return 0
}

list_profiles() {
	local i=0
	local filter=

	if [[ ${ROOT} != "/" ]] ; then
		echo "Using gcc-config info in ${ROOT}"
	fi

	if [[ ! -f ${GCC_ENV_D}/config-${CTARGET} ]] ; then
		if ! is_cross_compiler && [[ -e ${GCC_ENV_D}/config ]] ; then
			[[ -w ${GCC_ENV_D}/config ]] && mv ${GCC_ENV_D}/config ${GCC_ENV_D}/config-${CTARGET}
		else
			eerror "${argv0}: No gcc profile is active; please select one!"
			filter=${CTARGET}
		fi
	fi

	eval $(grep -s ^CURRENT= "${GCC_ENV_D}"/config-${CTARGET})
	CURRENT_NATIVE=${CURRENT}
	local target=
	for x in "${GCC_ENV_D}"/* ; do
		if [[ -f ${x} ]] && [[ ${x/\/config} == ${x} ]] ; then
			CTARGET=$(unset CTARGET; source "${x}"; echo ${CTARGET})

			((++i))

			[[ -n ${filter} ]] && [[ ${filter} != ${CTARGET:-${REAL_CHOST}} ]] && continue

			if [[ ${target} != ${CTARGET} ]] ; then
				[[ -n ${target} ]] && echo
				target=${CTARGET}
				CTARGET=""
			fi

			x=${x##*/}
			if [[ ${x} == ${CURRENT_NATIVE} ]] ; then
				x="${x} ${GOOD}*${NORMAL}"
			elif [[ -e ${GCC_ENV_D}/config-${target} ]] ; then
				source "${GCC_ENV_D}/config-${target}"
				[[ ${x} == ${CURRENT} ]] && x="${x} ${HILITE}*${NORMAL}"
			fi
			echo " [${i}] ${x}"
		fi
	done
}

print_environ() {
	local GCC_PATH=
	local ENV_CMD=
	local SET_ELEMENT=

	GCC_PATH=$(source "${GCC_ENV_D}/${CC_COMP}"; echo ${GCC_PATH:-${PATH}})

	case ${SHELL} in
		*/csh|*/tcsh)
			ENV_CMD="setenv"
			SET_ELEMENT=" "
			;;
		*)
			ENV_CMD="export"
			SET_ELEMENT="="
			;;
	esac

	(
	PATH=${GCC_PATH}:${PATH}
	for var in PATH GCC_SPECS ; do
		echo "${ENV_CMD} ${var}${SET_ELEMENT}\"${!var}\""
	done
	)
}

get_bin_path() {
	if [[ -e ${GCC_ENV_D}/${CC_COMP} ]] ; then
		(
			unset PATH GCC_PATH
			source "${GCC_ENV_D}/${CC_COMP}"
			echo "${GCC_PATH:-${PATH}}"
		)
	else
		echo "no-config"
		echo "${GCC_ENV_D}/${CC_COMP} doesnt exist" 1>&2
	fi

	return 0
}

get_lib_path() {
	if [[ -e ${GCC_ENV_D}/${CC_COMP} ]] ; then
		(
			unset LDPATH
			source "${GCC_ENV_D}/${CC_COMP}"
			echo "${LDPATH}"
		)
	else
		echo "no-config"
		echo "${GCC_ENV_D}/${CC_COMP} doesnt exist" 1>&2
	fi

	return 0
}

get_stdcxx_incdir() {
	# XXX: we should prob scrub this ...
	if [[ -e ${GCC_ENV_D}/${CC_COMP} ]] ; then
		(
			unset LDPATH STDCXX_INCDIR
			source "${GCC_ENV_D}/${CC_COMP}"
			echo "${LDPATH}/include/${STDCXX_INCDIR}"
		)
	else
		echo "no-config"
		echo "${GCC_ENV_D}/${CC_COMP} doesnt exist" 1>&2
	fi

	return 0
}

split_gcc_ver() {
	# Split up the gcc profile into components:
	# TARGET-VER[-specs] -> TARGET VER [specs]
	# arm-linux-3.3.6 -> arm-linux 3.3.6
	# x86_64-linux-4.0.1-pre1234 -> x86_64-linux 4.0.1-pre1234
	# sh-linux-3.4.4-hardened -> sh-linux 3.4.4 hardened
	#
	# So below we will start at the end and run a small state machine ...
	# specs [3]
	#    accept everything
	# specs -> version transition [3->2]
	#    when we find a version component
	# version [2]
	#    accept only version components (see the regex)
	# version -> target transition [2->1]
	#    when we hit a non version component
	# target [1]
	#    accept everything we have left
	#
	echo "$@" | awk -F- '
	function pushit(onme, pushee) {
		return (onme == "" ? pushee : pushee"-"onme);
	}
	{
		state=3
		targ=""
		ver=""
		spec=""
		for (i=NF; i > 0; --i) {
			if (state >= 2) {
				if ($i ~ /^(alpha|beta|pre|rc|p)?[[:digit:].]+$/) {
					ver=pushit(ver, $i)
					state=2
				} else if (state == 3)
					spec=pushit(spec, $i)
				else
					state=1
			}
			if (state == 1)
				targ = pushit(targ, $i)
		}

		if (targ == "") {
			if (ver == "") {
				ver=spec
				spec=""
			}
			targ=ver
			ver=""
		}
		print targ " " ver (spec != "" ? " " spec : "")
	}'
}
chop_gcc_ver_spec() {
	local splitTED=$(split_gcc_ver $@) # target ver spec
	splitTED=${splitTED#* }            # ver spec
	echo ${splitTED/ /-}               # ver-spec
}

SET_X=false
NEED_ACTION="yes"
DOIT="switch_profile"
CHECK_CHOST="no"
FORCE="no"

CC_COMP=
[[ -z ${ROOT} ]] && ROOT="/"
[[ ${ROOT:0-1} != "/" ]] && ROOT="${ROOT}/"
ENV_D="${ROOT}etc/env.d"
GCC_ENV_D="${ENV_D}/gcc"

for x in "$@" ; do
	case "${x}" in
		# Only use specified compiler if one is not already selected.
		-O|--use-old)
			CTARGET=${CTARGET:-$(try_real_hard_to_find_CHOST)}
			if get_current_profile &>/dev/null ; then
				CC_COMP=$(get_current_profile)
			else
				eerror "No profile selected, unable to utilize --use-old"
				exit 1
			fi
			;;
		-f|--force)
			FORCE="yes"
			;;
		-P|--use-portage-chost)
			CHECK_CHOST="yes"
			;;
		-c|--get-current-profile)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="get_current_profile"
			fi
			;;
		-l|--list-profiles)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="list_profiles"
			fi
			;;
		-S|--split-profile)
			if [[ ( $1 != "-S" && $1 != "--split-profile" ) || $# -eq 1 ]] ; then
				usage 1
			fi
			shift # push -S out
			for x in "$@" ; do
				split_gcc_ver ${x}
			done
			exit 0
			;;
		-E|--print-environ)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="print_environ"
			fi
			;;
		-B|--get-bin-path)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="get_bin_path"
			fi
			;;
		-L|--get-lib-path)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="get_lib_path"
			fi
			;;
		-X|--get-stdcxx-incdir)
			if [[ ${NEED_ACTION} == "yes" ]] ; then
				NEED_ACTION="no"
				DOIT="get_stdcxx_incdir"
			fi
			;;
		-x|--debug)
			SET_X=true
			;;
		-C|--nocolor)
			# nothing to do; functions.sh parsed this for us
			;;
		-h|--help)
			usage 0
			;;
		-V|--version)
			rcsfile="$RCSfile: gcc-config-1.4.1,v $"
			rcsfile=${rcsfile#: }
			rcsfile=${rcsfile%,v*}
			cvsrev="$Revision: 1.12 $"
			cvsrev=${cvsrev#: }
			cvsdate="$Date: 2011/12/07 05:42:19 $"
			cvsdate=${cvsdate#: }
			echo "${rcsfile} (r${cvsrev% *} @ ${cvsdate% *})"
			exit 0
			;;
		-*)
			eerror "${argv0}: Invalid switch!  Run ${argv0} without parameters for help."
			exit 1
			;;
		*)
			${SET_X} && set -x
			if [[ -z ${CC_COMP} ]] ; then
				if [[ -z $(echo ${x} | tr -d '[:digit:]') ]] ; then
					# User gave us a # representing the profile
					i=1
					for y in "${GCC_ENV_D}"/* ; do
						[[ -f ${y} ]] || continue
						[[ ${y/\/config} != ${y} ]] && continue

						if [[ -f ${y} ]] && [[ ${x} == ${i} ]] ; then
							CC_COMP=${y##*/}
							break
						fi
						((++i))
					done
				else
					# User gave us a full HOST-gccver
					x=${x##*/}
					if [[ ${DOIT} == "get_current_profile" && -z $(ls "${GCC_ENV_D}"/${x}-* 2>/dev/null) ]] || \
					   [[ ${DOIT} != "get_current_profile" && ! -f ${GCC_ENV_D}/${x} ]]
					then
						# Maybe they just gave us a gccver ...
						get_real_chost
						if [[ -f ${GCC_ENV_D}/${REAL_CHOST}-${x} ]] ; then
							x=${REAL_CHOST}-${x}
						else
							eerror "${argv0}: Could not locate '$x' in '${GCC_ENV_D}/' !"
							exit 1
						fi
					fi
					CC_COMP=${x}
				fi
			else
				eerror "${argv0}: Too many arguments!  Run ${argv0} without parameters for help."
				exit 1
			fi
			;;
	esac
done

${SET_X} && set -x

get_real_chost
[[ ${DOIT} == "get_current_profile" ]] \
	&& CTARGET=${CTARGET:-${CC_COMP:-${REAL_CHOST}}} \
	|| CTARGET=${CTARGET:-${REAL_CHOST}}

if [[ ${DOIT} == "switch_profile" ]] && [[ -z ${CC_COMP} ]] ; then
	usage 1
fi

if [[ -z ${CC_COMP} ]] ; then
	CC_COMP=$(get_current_profile)
	if [[ $? -ne 0 ]] ; then
		echo "${CC_COMP}"
		list_profiles
		exit 1
	fi
fi

if [[ ${DOIT} != "get_current_profile" ]] ; then
	GCC_LIB=$(
		LDPATH=$(source "${GCC_ENV_D}/${CC_COMP}"; echo ${LDPATH})
		echo ${LDPATH} | awk -F/ '{ print  "/"$2"/"$3"/"$4"/" }'
	)

	CC_COMP_VERSION=$(chop_gcc_ver_spec ${CC_COMP})
	CC_COMP_TARGET=${CC_COMP%-${CC_COMP_VERSION}*}

	if [[ ! -d ${ROOT}/${GCC_LIB}/${CC_COMP_TARGET}/${CC_COMP_VERSION} ]]; then
		CC_COMP_VERSION=${CC_COMP_VERSION%-*}
	fi

	if [[ ! -d ${ROOT}/${GCC_LIB}/${CC_COMP_TARGET}/${CC_COMP_VERSION} ]] || \
	   [[ ! -f ${GCC_ENV_D}/${CC_COMP} ]]
	then
		eerror "${argv0}: Profile does not exist or invalid setting for ${GCC_ENV_D}/${CC_COMP}" 1>&2
		#exit 1
	fi
fi

if [[ ${CHECK_CHOST} == "yes" ]] ; then
	# Chosen CHOST are not the same as the real CHOST according to
	# make.conf, and --use-portage-chost option was given, so do nothing
	get_real_chost
	CC_COMP_VERSION=$(chop_gcc_ver_spec ${CC_COMP})
	CC_COMP_TARGET=${CC_COMP:0:${#CC_COMP}-${#CC_COMP_VERSION}-1}
	[[ ${CC_COMP_TARGET} != ${REAL_CHOST} ]] && exit 0
fi

eval ${DOIT}

# vim:ts=4
