diff -ur ld.orig/InputFiles.cpp ld/InputFiles.cpp
--- ld.orig/InputFiles.cpp	2010-10-05 01:57:50.000000000 +0200
+++ ld/InputFiles.cpp	2011-09-03 20:33:40.000000000 +0200
@@ -58,7 +58,9 @@
 #include "macho_relocatable_file.h"
 #include "macho_dylib_file.h"
 #include "archive_file.h"
+#ifdef LTO
 #include "lto_file.h"
+#endif
 #include "opaque_section_file.h"
 
 
@@ -175,9 +177,11 @@
 	if ( result != NULL  )
 		 return result;
 		 
+#ifdef LTO
 	result = lto::archName(p, len);
 	if ( result != NULL  )
 		 return result;
+#endif
 	
 	if ( strncmp((const char*)p, "!<arch>\n", 8) == 0 )
 		return "archive";
@@ -264,10 +268,12 @@
 	if ( objResult != NULL ) 
 		return this->addObject(objResult, info, len);
 
+#if LTO
 	// see if it is an llvm object file
 	objResult = lto::parse(p, len, info.path, info.modTime, _nextInputOrdinal, _options.architecture(), _options.subArchitecture(), _options.logAllFiles());
 	if ( objResult != NULL ) 
 		return this->addObject(objResult, info, len);
+#endif
 
 	// see if it is a dynamic library
 	ld::dylib::File* dylibResult = mach_o::dylib::parse(p, len, info.path, info.modTime, _options, _nextInputOrdinal, info.options.fBundleLoader);
@@ -286,6 +292,7 @@
 	if ( archiveResult != NULL ) 
 		return this->addArchive(archiveResult, info, len);
 
+#ifdef LTO
 	// does not seem to be any valid linker input file, check LTO misconfiguration problems
 	if ( lto::archName((uint8_t*)p, len) != NULL ) {
 		if ( lto::libLTOisLoaded() ) {
@@ -310,6 +317,7 @@
 			throwf("could not process llvm bitcode object file, because %s could not be loaded", libLTO);
 		}
 	}
+#endif
 
 	// error handling
 	if ( ((fat_header*)p)->magic == OSSwapBigToHostInt32(FAT_MAGIC) ) {
diff -ur ld.orig/Options.cpp ld/Options.cpp
--- ld.orig/Options.cpp	2011-03-08 03:06:35.000000000 +0100
+++ ld/Options.cpp	2011-09-03 21:06:28.000000000 +0200
@@ -36,10 +36,12 @@
 #include "Architectures.hpp"
 #include "MachOFileAbstraction.hpp"
 
+#ifdef LTO
 // upward dependency on lto::version()
 namespace lto {
 	extern const char* version();
 }
+#endif
 
 // magic to place command line in crash reports
 const int crashreporterBufferSize = 2000;
@@ -2786,9 +2788,11 @@
 			fprintf(stderr, "%s", ldVersionString);
 			 // if only -v specified, exit cleanly
 			 if ( argc == 2 ) {
+#ifdef LTO
 				const char* ltoVers = lto::version();
 				if ( ltoVers != NULL )
 					fprintf(stderr, "%s\n", ltoVers);
+#endif
 				exit(0);
 			}
 		}
diff -ur ld.orig/Resolver.cpp ld/Resolver.cpp
--- ld.orig/Resolver.cpp	2010-12-10 23:39:41.000000000 +0100
+++ ld/Resolver.cpp	2011-09-03 20:38:24.000000000 +0200
@@ -58,7 +58,9 @@
 #include "InputFiles.h"
 #include "SymbolTable.h"
 #include "Resolver.h"
+#ifdef LTO
 #include "parsers/lto_file.h"
+#endif
 
 
 namespace ld {
@@ -1275,6 +1277,7 @@
 
 void Resolver::linkTimeOptimize()
 {
+#ifdef LTO
 	// only do work here if some llvm obj files where loaded
 	if ( ! _haveLLVMObjs )
 		return;
@@ -1375,6 +1378,9 @@
 		// check new code does not override some dylib
 		this->checkDylibSymbolCollisions();
 	}
+#else
+	return;
+#endif
 }
 
 
diff -ur ld.orig/ld.cpp ld/ld.cpp
--- ld.orig/ld.cpp	2011-09-03 20:24:07.000000000 +0200
+++ ld/ld.cpp	2011-09-03 20:40:06.000000000 +0200
@@ -85,7 +85,9 @@
 #include "parsers/archive_file.h"
 #include "parsers/macho_relocatable_file.h"
 #include "parsers/macho_dylib_file.h"
+#ifdef LTO
 #include "parsers/lto_file.h"
+#endif
 #include "parsers/opaque_section_file.h"
 
 
diff -ur ld.orig/parsers/archive_file.cpp ld/parsers/archive_file.cpp
--- ld.orig/parsers/archive_file.cpp	2010-09-29 02:26:13.000000000 +0200
+++ ld/parsers/archive_file.cpp	2011-09-03 21:01:55.000000000 +0200
@@ -38,7 +38,9 @@
 #include "Architectures.hpp"
 
 #include "macho_relocatable_file.h"
+#ifdef LTO
 #include "lto_file.h"
+#endif
 #include "archive_file.h"
 
 
@@ -87,8 +89,10 @@
 private:
 	static bool										validMachOFile(const uint8_t* fileContent, uint64_t fileLength, 
 																	const mach_o::relocatable::ParserOptions& opts);
+#ifdef LTO
 	static bool										validLTOFile(const uint8_t* fileContent, uint64_t fileLength, 
 																	const mach_o::relocatable::ParserOptions& opts);
+#endif
 	static cpu_type_t								architecture();
 
 
@@ -232,12 +236,13 @@
 	return mach_o::relocatable::isObjectFile(fileContent, fileLength, opts);
 }
 
+#ifdef LTO
 template <typename A>
 bool File<A>::validLTOFile(const uint8_t* fileContent, uint64_t fileLength, const mach_o::relocatable::ParserOptions& opts)
 {
 	return lto::isObjectFile(fileContent, fileLength, opts.architecture, opts.subType);
 }
-
+#endif
 
 
 template <typename A>
@@ -256,7 +261,11 @@
 		if ( (p==start) && ((strcmp(memberName, SYMDEF_SORTED) == 0) || (strcmp(memberName, SYMDEF) == 0)) )
 			continue;
 		// archive is valid if first .o file is valid
-		return (validMachOFile(p->content(), p->contentSize(), opts) || validLTOFile(p->content(), p->contentSize(), opts));
+		return (validMachOFile(p->content(), p->contentSize(), opts)
+#ifdef LTO
+				|| validLTOFile(p->content(), p->contentSize(), opts)
+#endif
+				);
 	}	
 	// empty archive
 	return true;
@@ -342,12 +351,14 @@
 																	this->ordinal() + memberIndex, _objOpts);
 		if ( result != NULL )
 			return result;
+#ifdef LTO
 		// see if member is llvm bitcode file
 		result = lto::parse(member->content(), member->contentSize(), 
 								mPath, member->modificationTime(), this->ordinal() + memberIndex, 
 								_objOpts.architecture, _objOpts.subType, _logAllFiles);
 		if ( result != NULL )
 			return result;
+#endif
 			
 		throwf("archive member '%s' with length %d is not mach-o or llvm bitcode", memberName, member->contentSize());
 	}
--- other/ObjectDump.cpp.orig	2011-09-03 21:15:10.000000000 +0200
+++ other/ObjectDump.cpp	2011-09-03 21:14:37.000000000 +0200
@@ -33,7 +33,9 @@
 
 #include "MachOFileAbstraction.hpp"
 #include "parsers/macho_relocatable_file.h"
+#ifdef LTO
 #include "parsers/lto_file.h"
+#endif
 
 static bool			sDumpContent= true;
 static bool			sDumpStabs	= false;
@@ -1121,10 +1123,12 @@
 	if ( objResult != NULL )
 		return objResult;
 
+#ifdef LTO
 	// see if it is an llvm object file
 	objResult = lto::parse(p, fileLen, path, stat_buf.st_mtime, 0, sPreferredArch, sPreferredSubArch, false);
 	if ( objResult != NULL ) 
 		return objResult;
+#endif
 
 	throwf("not a mach-o object file: %s", path);
 #else
