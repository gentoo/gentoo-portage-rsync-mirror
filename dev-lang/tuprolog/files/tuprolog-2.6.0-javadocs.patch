diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/ChoicePointStore.java tuprolog-2.6.0/src/alice/tuprolog/ChoicePointStore.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/ChoicePointStore.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/ChoicePointStore.java	2013-02-14 12:01:56.000000000 +0100
@@ -36,7 +36,6 @@
     
     /**
 	 * Return the actual choice-point store
-	 * @return
 	 */
     public ChoicePointContext getPointer() {
         return pointer;
@@ -45,7 +44,6 @@
     /**
      * Check if a choice point exists in the store.
      * As a side effect, removes choice points which have been already used and are now empty. 
-     * @return
      */
     protected boolean existChoicePoint() {
         if (pointer == null) return false;
@@ -93,4 +91,4 @@
         return l;
     }
     
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/ClauseStore.java tuprolog-2.6.0/src/alice/tuprolog/ClauseStore.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/ClauseStore.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/ClauseStore.java	2013-02-14 12:01:56.000000000 +0100
@@ -62,8 +62,6 @@
     
     /**
      * Verify if there is a term in compatibleGoals compatible with goal. 
-     * @param goal
-     * @param compGoals
      * @return true if compatible or false otherwise.
      */
     protected boolean existCompatibleClause() {
@@ -160,4 +158,4 @@
     }
     
     
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/EngineManager.java tuprolog-2.6.0/src/alice/tuprolog/EngineManager.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/EngineManager.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/EngineManager.java	2013-02-14 12:01:56.000000000 +0100
@@ -96,7 +96,7 @@
     /**
      *  Solves a query
      *
-     * @param g the term representing the goal to be demonstrated
+     * @param query the term representing the goal to be demonstrated
      * @return the result of the demonstration
      * @see SolveInfo
      **/
@@ -243,4 +243,4 @@
     }
     
     
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/event/SpyEvent.java tuprolog-2.6.0/src/alice/tuprolog/event/SpyEvent.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/event/SpyEvent.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/event/SpyEvent.java	2013-02-14 12:01:56.000000000 +0100
@@ -33,10 +33,6 @@
 	 * event description
 	 */
     private String msg;
-    /**
-	 * @uml.property  name="env"
-	 * @uml.associationEnd  
-	 */
     private Engine env;
 
     public SpyEvent(Object source, String msg_) {
@@ -63,4 +59,4 @@
         return msg + ((env == null) ? "" : env.toString());
     }
 
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/lib/BasicLibrary.java tuprolog-2.6.0/src/alice/tuprolog/lib/BasicLibrary.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/lib/BasicLibrary.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/lib/BasicLibrary.java	2013-02-14 12:01:56.000000000 +0100
@@ -116,7 +116,7 @@
     /**
      * Loads a library constructed from a theory.
      * 
-     * @param theory
+     * @param th
      *            theory text
      * @param libName
      *            name of the library
@@ -1358,4 +1358,4 @@
                 { "\\", "expression_bitwise_not", "functor" } };
     }
 
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/lib/IOLibrary.java tuprolog-2.6.0/src/alice/tuprolog/lib/IOLibrary.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/lib/IOLibrary.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/lib/IOLibrary.java	2013-02-14 12:01:56.000000000 +0100
@@ -375,7 +375,7 @@
     /**
      * Sets an arbitrary seed for the Random object.
      * 
-     * @param seed Seed to use
+     * @param t Seed to use
      * @return true if seed Term has a valid long value, false otherwise
      */
     public boolean set_seed_1(Term t) throws PrologError {
@@ -470,4 +470,4 @@
         }
         return true;
     }
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/lib/JavaLibrary.java tuprolog-2.6.0/src/alice/tuprolog/lib/JavaLibrary.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/lib/JavaLibrary.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/lib/JavaLibrary.java	2013-02-14 12:12:49.000000000 +0100
@@ -265,7 +265,7 @@
      * @author Michele Mannino
      * Creates of a java object - not backtrackable case
      * @param className The name of the class 
-     * @oaram path The list of the paths where the class may be contained
+     * @param paths The list of the paths where the class may be contained
      * @param argl The list of the arguments used by the constructor
      * @param id The name of the prolog term
      * @throws JavaException
@@ -1745,8 +1745,6 @@
 
     /**
      * Generates a fresh numeric identifier
-     * 
-     * @return
      */
     protected Struct generateFreshId() {
         return new Struct("$obj_" + id++);
@@ -2099,4 +2097,4 @@
         this.eventFullClass = eventClass;
         listenerInterfaceName = n;
     }
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/LibraryManager.java tuprolog-2.6.0/src/alice/tuprolog/LibraryManager.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/LibraryManager.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/LibraryManager.java	2013-02-14 12:05:56.000000000 +0100
@@ -49,7 +49,7 @@
 	 * If a library with the same name is already present,
 	 * a warning event is notified and the request is ignored.
 	 *
-	 * @param the name of the Java class containing the library to be loaded
+	 * @param className the name of the Java class containing the library to be loaded
 	 * @return the reference to the Library just loaded
 	 * @throws InvalidLibraryException if name is not a valid library
 	 */
@@ -81,8 +81,8 @@
 	 * If a library with the same name is already present,
 	 * a warning event is notified and the request is ignored.
 	 *
-	 * @param the name of the Java class containing the library to be loaded
-	 * @param the list of the paths where the library may be contained
+	 * @param className the name of the Java class containing the library to be loaded
+	 * @param paths the list of the paths where the library may be contained
 	 * @return the reference to the Library just loaded
 	 * @throws InvalidLibraryException if name is not a valid library
 	 */
@@ -305,4 +305,4 @@
 	
 	
 
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/PrimitiveManager.java tuprolog-2.6.0/src/alice/tuprolog/PrimitiveManager.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/PrimitiveManager.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/PrimitiveManager.java	2013-02-14 12:01:56.000000000 +0100
@@ -89,7 +89,7 @@
      * This involves identifying structs representing builtin
      * predicates and functors, and setting up related structures and links
      *
-     * @parm term the term to be identified
+     * @param term the term to be identified
      * @return term with the identified built-in directive
      */
     public Term identifyDirective(Term term) {
@@ -192,4 +192,4 @@
 		return (functorHashMap.containsKey(name + "/" + nArgs) || predicateHashMap.containsKey(name + "/" + nArgs));
 	}
     /**/
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprolog/Struct.java tuprolog-2.6.0/src/alice/tuprolog/Struct.java
--- tuprolog-2.6.0.orig/src/alice/tuprolog/Struct.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprolog/Struct.java	2013-02-14 12:06:46.000000000 +0100
@@ -201,7 +201,7 @@
     }
     
     /**
-	 * @return
+	 * @return predicateIndicator
 	 */
     String getPredicateIndicator() {
         return predicateIndicator;
@@ -894,4 +894,4 @@
 	}
     /**/
     
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprologx/ide/Console.java tuprolog-2.6.0/src/alice/tuprologx/ide/Console.java
--- tuprolog-2.6.0.orig/src/alice/tuprologx/ide/Console.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprologx/ide/Console.java	2013-02-14 12:01:56.000000000 +0100
@@ -10,8 +10,5 @@
     public void getNextSolution();
     public void acceptSolution();
     public void stopEngine();
-    /**
-	 * @uml.property  name="goal"
-	 */
     public String getGoal();
-}
\ No newline at end of file
+}
diff -ur tuprolog-2.6.0.orig/src/alice/tuprologx/ide/LibraryDialogFrame.java tuprolog-2.6.0/src/alice/tuprologx/ide/LibraryDialogFrame.java
--- tuprolog-2.6.0.orig/src/alice/tuprologx/ide/LibraryDialogFrame.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprologx/ide/LibraryDialogFrame.java	2013-02-14 12:12:14.000000000 +0100
@@ -370,7 +370,7 @@
      * Add a library from file chooser path.
      *
      * @param libraryClassname The name of the .class of the library to be added.
-     * @param path from file chooser.
+     * @param file from file chooser.
      */
     public void addLibrary(String libraryClassname, File file)
     {
@@ -498,7 +498,6 @@
         displayLibraryManagerStatus();
     }
 
-    /** @see alice.tuprologx.ide.SwingFrame#onClose()*/
     public void closeLibraryDialog()
     {
         onClose();
diff -ur tuprolog-2.6.0.orig/src/alice/tuprologx/ide/LibraryManager.java tuprolog-2.6.0/src/alice/tuprologx/ide/LibraryManager.java
--- tuprolog-2.6.0.orig/src/alice/tuprologx/ide/LibraryManager.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprologx/ide/LibraryManager.java	2013-02-14 12:11:42.000000000 +0100
@@ -131,7 +131,7 @@
 	     * Add a library to the manager.
 	     *
 	     * @param libraryClassname The name of the .class of the library to be added.
-	     * @param path The path where is contained the library.
+	     * @param file The path where is contained the library.
 	     * @throws ClassNotFoundException if the library class cannot be found.
 	     * @throws InvalidLibraryException if the library is not a valid tuProlog library.
 	     */
@@ -235,7 +235,7 @@
      * Load a library from the Library Manager into the engine.
      *
      * @param library The library to be loaded into the engine.
-     * @param path The library path where is contained the library.
+     * @param file The library path where is contained the library.
      * @throws InvalidLibraryException
      */
     public void loadLibrary(String library, File file) throws InvalidLibraryException {
@@ -290,4 +290,4 @@
 				klass.getName().replace('.', '/') + ".class");
 	}
 
-} // end LibraryManager class
\ No newline at end of file
+} // end LibraryManager class
diff -ur tuprolog-2.6.0.orig/src/alice/tuprologx/ide/ToolBar.java tuprolog-2.6.0/src/alice/tuprologx/ide/ToolBar.java
--- tuprolog-2.6.0.orig/src/alice/tuprologx/ide/ToolBar.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprologx/ide/ToolBar.java	2013-02-14 12:01:56.000000000 +0100
@@ -242,8 +242,6 @@
 
     /**
      * Set the tuProlog config frame
-     *
-     * @param libraryManager a libraryManager to associate to the libraryDialog 
      */
     public void setPrologConfig(PrologConfigFrame configFrame)
     {
diff -ur tuprolog-2.6.0.orig/src/alice/tuprologx/pj/lib/PJLibrary.java tuprolog-2.6.0/src/alice/tuprologx/pj/lib/PJLibrary.java
--- tuprolog-2.6.0.orig/src/alice/tuprologx/pj/lib/PJLibrary.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/tuprologx/pj/lib/PJLibrary.java	2013-02-14 12:01:56.000000000 +0100
@@ -1252,7 +1252,6 @@
 	
 	/**
 	 * Generates a fresh numeric identifier
-	 * @return
 	 */
 	protected Struct generateFreshId() {
 		return new Struct("$obj_" + id++);        
diff -ur tuprolog-2.6.0.orig/src/alice/util/DynamicURLClassLoader.java tuprolog-2.6.0/src/alice/util/DynamicURLClassLoader.java
--- tuprolog-2.6.0.orig/src/alice/util/DynamicURLClassLoader.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/DynamicURLClassLoader.java	2013-02-14 12:10:02.000000000 +0100
@@ -35,7 +35,7 @@
 	
     /**
      * Constructor that specifies the URLs array.
-	 * @param URL[] urls - Used to load a directory a URL ends with "/" or "\"
+	 * @param urls - Used to load a directory a URL ends with "/" or "\"
 	 * otherwise it loads a class contained into a .jar
 	 */
 
@@ -148,7 +148,7 @@
 	
 	/**
 	 * Remove array URLs method.
-	 * @param urls - URL to be removed.
+	 * @param url - URL to be removed.
 	 */
 
 	public void removeURL(URL url) throws IllegalArgumentException
diff -ur tuprolog-2.6.0.orig/src/alice/util/InspectionUtils.java tuprolog-2.6.0/src/alice/util/InspectionUtils.java
--- tuprolog-2.6.0.orig/src/alice/util/InspectionUtils.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/InspectionUtils.java	2013-02-14 12:09:22.000000000 +0100
@@ -14,9 +14,9 @@
 	/**
 	 * @author Michele Mannino
 	 * 
-	 * @param type: class to be inspected
-	 * @param methodName: name of method
-	 * @param parms: array of params
+	 * @param type class to be inspected
+	 * @param methodName name of method
+	 * @param parms array of params
 	 */
 	public static Method searchForMethod(Class<?> type, String methodName, Class<?>[] parms) {
 	    Method[] methods = type.getMethods();
diff -ur tuprolog-2.6.0.orig/src/alice/util/jedit/InputHandler.java tuprolog-2.6.0/src/alice/util/jedit/InputHandler.java
--- tuprolog-2.6.0.orig/src/alice/util/jedit/InputHandler.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/jedit/InputHandler.java	2013-02-14 12:01:56.000000000 +0100
@@ -24,7 +24,7 @@
  *
  * @author Slava Pestov
  * @version $Id: InputHandler.java,v 1.14 1999/12/13 03:40:30 sp Exp $
- * @see org.gjt.sp.jedit.textarea.DefaultInputHandler
+ * @see alice.util.jedit.DefaultInputHandler
  */
 public abstract class InputHandler extends KeyAdapter
 {
@@ -187,7 +187,7 @@
     /**
      * Grabs the next key typed event and invokes the specified
      * action with the key as a the action command.
-     * @param action The action
+     * @param listener The action
      */
     public void grabNextKeyStroke(ActionListener listener)
     {
diff -ur tuprolog-2.6.0.orig/src/alice/util/jedit/JEditTextArea.java tuprolog-2.6.0/src/alice/util/jedit/JEditTextArea.java
--- tuprolog-2.6.0.orig/src/alice/util/jedit/JEditTextArea.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/jedit/JEditTextArea.java	2013-02-14 12:01:56.000000000 +0100
@@ -1401,7 +1401,7 @@
 
 	/**
 	 * Sets if the selection should be rectangular.
-	 * @param overwrite True if the selection should be rectangular,
+	 * @param rectSelect True if the selection should be rectangular,
 	 * false otherwise.
 	 */
 	public final void setSelectionRectangular(boolean rectSelect)
diff -ur tuprolog-2.6.0.orig/src/alice/util/jedit/KeywordMap.java tuprolog-2.6.0/src/alice/util/jedit/KeywordMap.java
--- tuprolog-2.6.0.orig/src/alice/util/jedit/KeywordMap.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/jedit/KeywordMap.java	2013-02-14 12:01:56.000000000 +0100
@@ -75,7 +75,7 @@
     /**
      * Adds a key-value mapping.
      * @param keyword The key
-     * @Param id The value
+     * @param id The value
      */
     public void add(String keyword, byte id)
     {
@@ -102,9 +102,6 @@
     }
 
     // protected members
-    /**
-	 * @uml.property  name="mapLength"
-	 */
     protected int mapLength;
 
     protected int getStringMapKey(String s)
diff -ur tuprolog-2.6.0.orig/src/alice/util/jedit/TextAreaPainter.java tuprolog-2.6.0/src/alice/util/jedit/TextAreaPainter.java
--- tuprolog-2.6.0.orig/src/alice/util/jedit/TextAreaPainter.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/jedit/TextAreaPainter.java	2013-02-14 12:01:56.000000000 +0100
@@ -75,7 +75,7 @@
 
     /**
 	 * Returns the syntax styles used to paint colorized text. Entry <i>n</i> will be used to paint tokens with id = <i>n</i>.
-	 * @see  org.gjt.sp.jedit.syntax.Token
+	 * @see  alice.util.jedit.Token
 	 */
     public final SyntaxStyle[] getStyles()
     {
@@ -85,7 +85,7 @@
     /**
 	 * Sets the syntax styles used to paint colorized text. Entry <i>n</i> will be used to paint tokens with id = <i>n</i>.
 	 * @param styles  The syntax styles
-	 * @see  org.gjt.sp.jedit.syntax.Token
+	 * @see  alice.util.jedit.Token
 	 */
     public final void setStyles(SyntaxStyle[] styles)
     {
@@ -356,7 +356,7 @@
 
     /**
      * Repaints the text.
-     * @param g The graphics context
+     * @param gfx The graphics context
      */
     public void paint(Graphics gfx)
     {
diff -ur tuprolog-2.6.0.orig/src/alice/util/jedit/TokenMarker.java tuprolog-2.6.0/src/alice/util/jedit/TokenMarker.java
--- tuprolog-2.6.0.orig/src/alice/util/jedit/TokenMarker.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/jedit/TokenMarker.java	2013-02-14 12:01:56.000000000 +0100
@@ -23,7 +23,7 @@
  * @author Slava Pestov
  * @version $Id: TokenMarker.java,v 1.32 1999/12/13 03:40:30 sp Exp $
  *
- * @see org.gjt.sp.jedit.syntax.Token
+ * @see alice.util.jedit.Token
  */
 public abstract class TokenMarker
 {
diff -ur tuprolog-2.6.0.orig/src/alice/util/ReadOnlyLinkedList.java tuprolog-2.6.0/src/alice/util/ReadOnlyLinkedList.java
--- tuprolog-2.6.0.orig/src/alice/util/ReadOnlyLinkedList.java	2013-02-14 12:01:32.000000000 +0100
+++ tuprolog-2.6.0/src/alice/util/ReadOnlyLinkedList.java	2013-02-14 12:01:56.000000000 +0100
@@ -12,10 +12,10 @@
 import java.util.ListIterator;
 
 /**
- * ReadOnlyLinkedList<E> encapsulate a {@link LinkedList<E>}
+ * ReadOnlyLinkedList<E> encapsulate a {@link LinkedList}
  * and ensures that the given list is navigated only.
  *
- * Even if ReadOnlyLinkedList<E> implements {@link List<E>} it doesn't
+ * Even if ReadOnlyLinkedList<E> implements {@link List} it doesn't
  * support modifiers methods, and throws {@link UnsupportedOperationException}
  * if invoked.
  *
