<?xml version="1.0"?>
<!--
 | Ant build script for the TV-Browser project.
 |
 | TV-Browser
 | Copyright (C) 04-2003 Martin Oberhauser (martin@tvbrowser.org)
 |
 | This program is free software; you can redistribute it and/or
 | modify it under the terms of the GNU General Public License
 | as published by the Free Software Foundation; either version 2
 | of the License, or (at your option) any later version.
 |
 | This program is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 | GNU General Public License for more details.
 |
 | You should have received a copy of the GNU General Public License
 | along with this program; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 |
 | CVS information:
 |  $RCSfile: tvbrowser-3.2.1-build.xml,v $
 |   $Source: /var/cvsroot/gentoo-x86/media-tv/tvbrowser/files/tvbrowser-3.2.1-build.xml,v $
 |     $Date: 2013/08/13 20:58:08 $
 |   $Author: tomwij $
 | $Revision: 1.1 $
 |
 | Author: Til Schneider, www.murfman.de
 | 
 | Modified by Gentoo Developers for Gentoo Linux packaging purposes.
 +-->
<project name="TV-Browser" default="targets" basedir=".">


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  |
  |  The properties and paths
  |
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <property environment="env"/>
  <property file="build.properties"/>
  <property name="programname" value="TV-Browser"/>
  <property name="programname.file" value="tvbrowser"/>
  <property name="classes.dir" value="classes"/>
  <property name="lib.dir" value="lib"/>
  <property name="txt.dir" value="txt"/>
  <property name="src.dir" value="src"/>
  <property name="test.src.dir" value="test/src"/>
  <property name="test.classes.dir" value="test/classes"/>
  <property name="doc.dir" value="doc"/>
  <property name="doc.header" value="${programname} ${tvbrowser.version} API"/>
  <property name="doc.title" value="API documentation for ${programname} ${tvbrowser.version}"/>
  <property name="doc.bottom" value="${programname} ${tvbrowser.version}, Copyright (C) 2004-2008 TV-Browser Team (dev@tvbrowser.org)"/>

  <property name="runtime.dir" value="runtime"/>
  <property name="tvbrowser-default.runtime.dir" value="${runtime.dir}/tvbrowser_default"/>

  <property name="tvbrowser-win.runtime.dir" value="${runtime.dir}/tvbrowser_win"/>
  <property name="tvbrowser-linux.runtime.dir" value="${runtime.dir}/tvbrowser_linux"/>
  <property name="tvbrowser-transportable.runtime.dir" value="${runtime.dir}/tvbrowser_transportable"/>
  <property name="tvbrowser-nightly.runtime.dir" value="${runtime.dir}/tvbrowser_nightly"/>
  <property name="tvbrowser-mac.runtime.dir" value="${runtime.dir}/tvbrowser_mac"/>
  <property name="themepacks.dir" value="themepacks"/>
  <property name="personas.dir" value="personas"/>

  <property name="deployment.dir" value="deployment" />
  <property name="win.dir" value="${deployment.dir}/win"/>
  <property name="linux.dir" value="${deployment.dir}/linux"/>
  <property name="x11.dir" value="${deployment.dir}/x11"/>
  <property name="installer.dir" value="${win.dir}/installer"/>
  <property name="package-lists.dir" value="${txt.dir}/package-lists"/>
  <property name="public.dir" value="public"/>

  <path id="sourcepath">
    <pathelement location="${src.dir}"/>
  </path>

  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
      <exclude name="ant.jar"/>
    </fileset>
  </path>

  <path id="docpath">
    <path refid="sourcepath"/>
  </path>

  <path id="ant-deb.classpath">
	 <fileset dir="${deployment.dir}/linux/ant-deb-task" includes="*.jar"/>
  </path>
	
  <path id="ant-rpm.classpath">
	 <fileset dir="${deployment.dir}/linux/redline-rpm" includes="*.jar"/>
  </path>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|
|  Display all targets
|
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="targets" description="lists all the available public targets">
    <echo message="usage: build [target]"/>
    <echo message=""/>
    <echo message="main targets:"/>
    <echo message="============="/>
    <echo message="  targets               Shows this list of targets."/>
    <echo message="  dump-info             Dumps some information (VM-Version...)."/>
    <echo message="  public-default        Creates platform-independent binaries"/>
  	<echo message="  public-linux          Creates binaries for Linux platforms"/>
  	<echo message="  public-nightly        Creates platform-independent binaries for nightly transportable version of TV-Browser (without platform dependent starters)"/>
    <echo message="  public-src            Creates a .zip file containing the full source code of TV-Browser"/>
    <echo message="  public-doc            Generates the JavaDoc documentation."/>
  	<echo message="  release-packages      Generates all packages needed for a TV-Browser release (without Mac version, works only under Windows)."/>
    <echo message=""/>
    <echo message="further targets:"/>
    <echo message="================"/>
    <echo message="  clean                 Deletes all class files, runtime directories and temporary files."/>
    <echo message="  clean-runtime         Deletes the runtime directory."/>
    <echo message="  make-default          Compiles the platform independent source code."/>
    <echo message="  make-linux            Compiles the source code for linux platforms."/>
    <echo message="  runtime-default       Creates the platform independent runtime directory" />
    <echo message="  runtime-linux         Creates a runtime directory for linux platforms" />
    <echo message="  test                  Runs the JUnit tests."/>
  </target>


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   |
   |  Clean tasks: remove files
   |
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


  <!-- Deletes the runtime director -->
  <target name="clean">
    <delete dir="${classes.dir}"/>
    <delete dir="${test.classes.dir}"/>
  </target>


  <!-- Deletes the classes and the runtime directory. -->
  <target name="clean-default" depends="clean">
    <delete dir="${tvbrowser-default.runtime.dir}"/>
  </target>

  <!-- Deletes the classes and the runtime directory. -->
  <target name="clean-transportable" depends="clean">
	<delete dir="${tvbrowser-transportable.runtime.dir}"/>
  </target>

  <!-- Deletes the classes and the runtime directory. -->
  <target name="clean-win" depends="clean">
    <delete dir="${tvbrowser-win.runtime.dir}"/>
  </target>

  <!-- Deletes the classes and the runtime directory. -->
  <target name="clean-linux" depends="clean">
    <delete dir="${tvbrowser-linux.runtime.dir}"/>
  </target>

  <!-- Deletes the classes and the runtime directory. -->
  <target name="clean-mac" depends="clean">
    <delete dir="${tvbrowser-mac.runtime.dir}"/>
  </target>

  <target name="clean-all" depends="clean-mac, clean-linux, clean-win, clean-default">
    <delete dir="${public.dir}"/>
  </target>



  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|
|  Make tasks: compile the source code
|
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="copy-resources">
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.gif"/>
      <fileset dir="${src.dir}" includes="**/*.jpg"/>
      <fileset dir="${src.dir}" includes="**/*.png"/>
      <fileset dir="${src.dir}" includes="**/*.dtd"/>
      <fileset dir="${src.dir}" includes="**/*.properties"/>
      <fileset dir="${src.dir}" includes="**/*.theme"/>
      <fileset dir="${src.dir}" includes="**/*.csv"/>
    </copy>
  </target>

  <!-- Compiles the platform independent source code -->
  <target name="make-default" depends="copy-resources">
    <echo message="Compiling the source code ... "/>
    <mkdir dir="${classes.dir}"/>
    <javac destdir="${classes.dir}" debug="${debug}" deprecation="true" encoding="UTF-8" target="1.6" source="1.6">
      <src>
        <path refid="sourcepath"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
      <exclude name="**/macosx/*"/>
    </javac>


  </target>


  <!-- Compiles the source code for windows platforms -->
  <target name="make-win" depends="make-default">

  </target>


  <!-- Compiles the source code for linux platforms -->
  <target name="make-linux" depends="make-default">

  </target>
	
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   |
   |  Runtime tasks: create runtime folders for the specified platform
   |
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="mkdirs">
    <!-- Make the TV-Browser runtime -->
    <delete dir="${tvbrowser-default.runtime.dir}"/>
    <mkdir dir="${tvbrowser-default.runtime.dir}"/>
		<mkdir dir="${tvbrowser-default.runtime.dir}/plugins"/>  	
  </target>
	
  <!-- Creates the platform independent runtime folder -->
  <target name="runtime" depends="clean-default, make-default, mkdirs">
    <echo message="Creating the jars ..."/>

    <!-- Pack the tvbrowser.jar -->
    <jar jarfile="${tvbrowser-default.runtime.dir}/tvbrowser.jar"
         compress="true"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="tvbrowser.TVBrowser"/>
      	<attribute name="SplashScreen-Image" value="splash.png"/>
      </manifest>
      <fileset dir="${classes.dir}" includes="tvbrowser/**"/>
      <fileset dir="${classes.dir}" includes="devplugin/**"/>
      <fileset dir="${classes.dir}" includes="tvdataservice/**"/>
      <fileset dir="${classes.dir}" includes="util/**"/>
      <fileset dir="${classes.dir}" includes="com/**"/>
      <fileset dir="${classes.dir}/imgs" includes="splash.png"/>
    </jar>

    <!-- Copy the other stuff -->
    <echo message="Copying the images and all the other stuff ..."/>
    <mkdir dir="${tvbrowser-default.runtime.dir}/imgs"/>
    <copy todir="${tvbrowser-default.runtime.dir}/imgs">
      <fileset dir="${classes.dir}/imgs" excludes="splash.png"/>
    </copy>

    <copy todir="${tvbrowser-default.runtime.dir}/imgs">
	    <fileset dir="./images/additional">
		    <include name="*.ico"/>
	    </fileset>
    </copy>
  	
  	<mkdir dir="${tvbrowser-default.runtime.dir}/personas"/>
    <copy todir="${tvbrowser-default.runtime.dir}/personas">
	    <fileset dir="./personas"/>
	</copy>
    <copy todir="${tvbrowser-default.runtime.dir}">
      <fileset dir="${txt.dir}" includes="LICENSE.txt"/>
      <fileset dir="${txt.dir}" includes="COPYRIGHT.txt"/>
      <fileset dir="${deployment.dir}/common" includes="**" />
      <!--    <fileset dir="${txt.dir}" includes="website.url"/>          -->
      <!--    <fileset dir="${txt.dir}" includes="default.properties"/>   -->
      <!--    <fileset dir="${txt.dir}" includes="osx.properties"/>       -->
      <!--    <fileset dir="${txt.dir}" includes="windows.properties"/>   -->
      <!--    <fileset dir="${txt.dir}" includes="tvbrowser.sh"/>         -->
    </copy>

    <!-- Themepacks -->
    <mkdir dir="${tvbrowser-default.runtime.dir}/themepacks"/>
    <copy todir="${tvbrowser-default.runtime.dir}/themepacks">
      <fileset dir="themepacks"/>
    </copy>

    <!-- Icon-Themes -->
    <mkdir dir="${tvbrowser-default.runtime.dir}/icons"/>

  	<zip destfile="${tvbrowser-default.runtime.dir}/icons/Tango.zip">
  		<zipfileset dir="images/themes/tango"></zipfileset>
  	</zip>
  	<zip destfile="${tvbrowser-default.runtime.dir}/icons/CrystalClear.zip">
  		<zipfileset dir="images/themes/CrystalClear"></zipfileset>
  	</zip>
  </target>


  <!-- Creates the default runtime folder (platform independent) -->
  <target name="runtime-default" depends="clean-default, make-default, runtime, test">
  </target>

  <!-- Creates the runtime folder for linux platforms -->
  <target name="runtime-linux" depends="clean-linux, make-linux, runtime">
    <delete dir="${tvbrowser-linux.runtime.dir}"/>
    <mkdir dir="${tvbrowser-linux.runtime.dir}"/>
    <copy todir="${tvbrowser-linux.runtime.dir}">
      <fileset dir="${tvbrowser-default.runtime.dir}"/>
      <fileset dir="${deployment.dir}" includes="linux.properties"/>
      <fileset dir="${linux.dir}" includes="tvbrowser.sh"/>
     <!-- <fileset dir="${linux.dir}" includes="tvbrowser.desktop"/>-->
    </copy>
   	<chmod perm="u+x" file="${tvbrowser-linux.runtime.dir}/tvbrowser.sh"/>
  </target>

  <target name="release-packages" depends="public-linux, public-default, public-doc, public-src"/>

  <!-- Creates the release binaries (.zip) for the platform independent TV-Browser version -->
  <target name="public-default" depends="runtime-default" description="creates platform-independent binaries">
    <mkdir dir="${public.dir}"/>

    <zip destfile="${public.dir}/tvbrowser_${tvbrowser.version}_bin.zip">
      <zipfileset prefix="tvbrowser-${tvbrowser.version}"
                  dir="${tvbrowser-default.runtime.dir}"/>
    </zip>
  </target>

  <target name="clean-public">
  	<delete>
  		<fileset dir="${public.dir}" includes="**/*"/>
  	</delete>
  </target>
	
  <target name="public-nightly" depends="clean-public" description="Creates platform-independent binaries for nightly transportable version of TV-Browser (without platform dependent starters)">
  	<mkdir dir="${public.dir}"/>

    <tstamp>
      <format property="TODAY" pattern="yyyy-MM-dd"/>
    </tstamp>

  	<echo file="${tvbrowser-transportable.runtime.dir}/NIGHTLY_VALUES" append="false">${TODAY}-nightly</echo>

	<zip destfile="${public.dir}/tvbrowser_${tvbrowser.version}_${TODAY}_nightly_bin_transportable.zip">
		<zipfileset prefix="tvbrowser-nightly-transportable" dir="${tvbrowser-transportable.runtime.dir}"/>
	</zip>

  </target>

  <!-- Creates the release binaries (.tar.gz) for linux platforms -->
  <target name="public-linux" depends="runtime-linux" description="Creates binaries for Linux platforms">
    <mkdir dir="${public.dir}"/>

    <tar tarfile="${public.dir}/tvbrowser_${tvbrowser.version}_bin.tar.gz" compression="gzip">
      <tarfileset dir="${tvbrowser-linux.runtime.dir}" prefix="tvbrowser-${tvbrowser.version}" excludes="**/tvbrowser.sh"/>
   	  <tarfileset dir="${tvbrowser-linux.runtime.dir}"
    	              prefix="tvbrowser-${tvbrowser.version}"
				 mode="755" includes="**/tvbrowser.sh" />
    </tar>

  </target>

  <!--
    | Does the JUnit tests.
    |
    | If this target does not work, copy the file "junit.jar" from the directory "lib"
    | in your ANT_HOME/lib directory. (ANT_HOME/lib is on my machine "/usr/share/ant/lib")
    +-->
  <target name="test" depends="make-default">
	<echo>${ant.version}. JUnit4 tests will only work with Ant>=1.7</echo>
  	<mkdir dir="${test.classes.dir}"/>
    <javac destdir="${test.classes.dir}" debug="${debug}" deprecation="true" encoding="UTF-8" target="1.5" source="1.5">
      <src>
        <path path="${test.src.dir}"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </javac>

    <copy todir="${test.classes.dir}">
      <fileset dir="${test.src.dir}" includes="**/*.gif"/>
      <fileset dir="${test.src.dir}" includes="**/*.jpg"/>
      <fileset dir="${test.src.dir}" includes="**/*.png"/>
      <fileset dir="${test.src.dir}" includes="**/*.dtd"/>
      <fileset dir="${test.src.dir}" includes="**/*.properties"/>
      <fileset dir="${test.src.dir}" includes="**/*.theme"/>
      <fileset dir="${test.src.dir}" includes="**/*.txt"/>
    </copy>


    <junit haltonfailure="yes" fork="no" >
      <classpath>
        <path refid="classpath"/>
        <path path="${test.classes.dir}"/>
      </classpath>

      <formatter type="brief" usefile="false"/>

      <batchtest>
        <fileset dir="${test.src.dir}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--
  | Generates the JavaDoc documentation.
  +-->
  <target name="public-doc" description="Generates the JavaDoc documentation">
    <echo message="Generating JavaDoc documentation ..." />
    <delete dir="${doc.dir}"/>
    <mkdir dir="${doc.dir}"/>
    <javadoc packagenames="*"
             sourcepathref="docpath"
             classpathref="classpath"
             destdir="${doc.dir}"
             doctitle="${doc.title}"
             windowtitle="${doc.title}"
             additionalparam="-breakiterator"
             header="${doc.header}"
             bottom="${doc.bottom}"
             access="package"
             failonerror="true"
    		 encoding="UTF-8"
    	     charset="UTF-8" 
  	         docencoding="UTF-8">
      <link offline="true"
            href="${java-api-location}"
            packagelistLoc="${package-lists.dir}/jdk/"/>
    </javadoc>


    <zip destfile="${public.dir}/tvbrowser_${tvbrowser.version}_doc.zip">
      <zipfileset prefix="tvbrowser_v${tvbrowser.version}/doc"
                  dir="${doc.dir}"/>
    </zip>

  </target>

  <!--
   | Dump some information.
   +-->
  <target name="dump-info">
    <echo message="JAVA_HOME=${env.JAVA_HOME}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
  </target>




  <target name="public-src" description="Creates a .zip file containing the full source code of TV-Browser">
    <mkdir dir="${public.dir}"/>
    <zip destfile="${public.dir}/tvbrowser_${tvbrowser.version}_src.zip">
      <zipfileset prefix="tvbrowser-${tvbrowser.version}"
                  dir=".">

        <exclude name="${classes.dir}/**" />
        <exclude name="${public.dir}/**" />
        <exclude name="${runtime.dir}/**" />

      </zipfileset>
    </zip>
  </target>

	<target name="public-tvdatakit"></target>

</project>
