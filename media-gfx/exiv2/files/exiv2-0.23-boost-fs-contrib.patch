--- work/exiv2-0.23/contrib/organize/organize.cpp	2009-03-08 09:26:30.000000000 +0100
+++ work/exiv2-0.23/contrib/organize/organize.cpp	2009-03-08 09:26:30.000000000 +0100
@@ -294,7 +294,7 @@
 bool md5sum(const fs::path &path, md5digest &digest)
 {
     try {
-        Exiv2::FileIo io(path.file_string());
+        Exiv2::FileIo io(path.string());
         if (io.open() != 0)
             return false;
         Exiv2::IoCloser closer(io);
@@ -568,8 +568,8 @@
 
 fs::path uniquify(const fs::path &dest)
 {
-    std::string ext = dest.extension();
-    std::string fname = dest.stem();
+    std::string ext = dest.extension().string();
+    std::string fname = dest.stem().string();
     fs::path parent = dest.parent_path();
 
     unsigned number = 1;
@@ -600,13 +600,13 @@
     std::vector<std::string>::const_iterator x_iter = params.excludes.begin();
     std::vector<std::string>::const_iterator x_end = params.excludes.end();
     for( ; x_iter != x_end; ++x_iter ) {
-        if(boost::contains(directory.file_string(), *x_iter)) {
+        if(boost::contains(directory.string(), *x_iter)) {
             exclude = true;
             break;
         }
     }
     if(exclude) {
-        info(std::string("excluding directory: ") + directory.file_string() +
+        info(std::string("excluding directory: ") + directory.string() +
             " matched: " + *x_iter);
         ++params.dir_ex_count;
         return;
@@ -621,7 +621,7 @@
                     process_directory(p_iter->path(), depth + 1, params);
                 else {
                     info(std::string("depth reached, skipping: ") +
-                        p_iter->path().file_string());
+                        p_iter->path().string());
                 }
             }
             else if( is_regular_file(*p_iter) ) {
@@ -630,13 +630,13 @@
                 exclude = false;
                 x_iter = params.excludes.begin();
                 for( ; x_iter != x_end; ++x_iter ) {
-                    if(boost::contains(p_iter->path().file_string(), *x_iter)) {
+                    if(boost::contains(p_iter->path().string(), *x_iter)) {
                         exclude = true;
                         break;
                     }
                 }
                 if(exclude) {
-                    info(std::string("excluding file: ") + p_iter->path().file_string() +
+                    info(std::string("excluding file: ") + p_iter->path().string() +
                         " matched: " + *x_iter);
                     ++params.file_ex_count;
                     continue;
@@ -648,45 +648,45 @@
                     if(!dest_subdir.empty())
                         dest_file = params.dest_dir / dest_subdir;
                     else if(params.ignore_unsorted) {
-                        info(std::string("ignoring unsorted: ") + p_iter->path().file_string());
+                        info(std::string("ignoring unsorted: ") + p_iter->path().string());
                         ++params.unsorted_ignored_count;
                         continue;
                     }
                     else {
-                        info(std::string("unsorted file (missing metadata): ") + p_iter->path().file_string());
+                        info(std::string("unsorted file (missing metadata): ") + p_iter->path().string());
                         dest_file = params.unsorted_dir;
                         ++params.unsorted_count;
                     }
             
-                    dest_file /= p_iter->filename();
+                    dest_file /= p_iter->path().filename();
                 
                     if(fs::exists(dest_file)) {
                         if(params.ignore_dups) {
-                            info(std::string("ignoring: ") + p_iter->path().file_string() +
-                                " duplicates: " +  dest_file.file_string());
+                            info(std::string("ignoring: ") + p_iter->path().string() +
+                                " duplicates: " +  dest_file.string());
                             ++params.dups_ignored_count;
                             continue;
                         }
                         else {
                             if(params.force) {
-                                info(std::string("force removing: ") + dest_file.file_string() + " for: "
-                                    + p_iter->path().file_string());
+                                info(std::string("force removing: ") + dest_file.string() + " for: "
+                                    + p_iter->path().string());
                                 if(!params.dry_run)
                                     fs::remove(dest_file);
                             }
                             else if(params.rename) {
-                                info(std::string("renaming: ") + p_iter->path().file_string() +
-                                    " duplicates: " +  dest_file.file_string());
+                                info(std::string("renaming: ") + p_iter->path().string() +
+                                    " duplicates: " +  dest_file.string());
                                 dest_file = uniquify(dest_file);
                             }
                             else {
-                                info(std::string("duplicate file: ") + p_iter->path().file_string() +
-                                    " of: " +  dest_file.file_string());
-                                dest_file = params.dups_dir / dest_subdir / p_iter->filename();
+                                info(std::string("duplicate file: ") + p_iter->path().string() +
+                                    " of: " +  dest_file.string());
+                                dest_file = params.dups_dir / dest_subdir / p_iter->path().filename();
                                 // Ugh, more dup possibilities
                                 if(fs::exists(dest_file)) {
-                                    info(std::string("renaming: ") + p_iter->path().file_string() +
-                                        " duplicates: " +  dest_file.file_string());
+                                    info(std::string("renaming: ") + p_iter->path().string() +
+                                        " duplicates: " +  dest_file.string());
                                     dest_file = uniquify(dest_file);
                                 }
                             }
@@ -698,8 +698,8 @@
                         fs::create_directories(dest_file.parent_path());
                 
                     if(params.symlink) {
-                        info(std::string("linking from: ") + p_iter->path().file_string() + 
-                            " to: " + dest_file.file_string());
+                        info(std::string("linking from: ") + p_iter->path().string() + 
+                            " to: " + dest_file.string());
                         if(!params.dry_run) {
                             // The target of a symlink must be either absolute (aka complete) or
                             // relative to the location of the link. Easiest solution is to make
@@ -713,8 +713,8 @@
                         }
                     }
                     else {
-                        info(std::string("copying from: ") + p_iter->path().file_string() +
-                            " to: " + dest_file.file_string());
+                        info(std::string("copying from: ") + p_iter->path().string() +
+                            " to: " + dest_file.string());
                         if(!params.dry_run) {
                             // Copy the file and restore its write time (needed for posix)
                             std::time_t time = fs::last_write_time(*p_iter);
@@ -730,8 +730,8 @@
                                 if(!ok) {
                                     // Should probably find a more appropriate exception for this
                                     throw std::runtime_error(std::string("File verification failed: '") 
-                                        + p_iter->path().file_string() + "' differs from '" + 
-                                        dest_file.file_string() + "'");
+                                        + p_iter->path().string() + "' differs from '" + 
+                                        dest_file.string() + "'");
                                 } 
                                 else {
                                     info(std::string("verification passed"));
@@ -740,7 +740,7 @@
                         }
                     }
                     if(params.move) {
-                        info(std::string("removing: ") + p_iter->path().file_string());
+                        info(std::string("removing: ") + p_iter->path().string());
                         if(!params.dry_run)
                             fs::remove(*p_iter);
                     }
@@ -752,14 +752,14 @@
                     ++params.ok_count;
                 }
                 catch(fs::filesystem_error& e) {
-                    error(e, std::string("skipping file: " + p_iter->path().file_string()));
+                    error(e, std::string("skipping file: " + p_iter->path().string()));
                     ++params.file_err_count;
                 }
             }
         }
     }
     catch(fs::filesystem_error& e) {
-        error(e, std::string("skipping directory: " + directory.file_string()));
+        error(e, std::string("skipping directory: " + directory.string()));
         ++params.dir_err_count;
     }
 }
