--- a/bindings/perl-shared/RRDs.xs
+++ b/bindings/perl-shared/RRDs.xs
@@ -189,6 +189,7 @@
 	OUTPUT:
 		RETVAL
 
+#ifdef HAVE_RRD_GRAPH
 SV *
 rrd_graph(...)
 	PROTOTYPE: @	
@@ -235,6 +236,8 @@
 		PUSHs(sv_2mortal(newSViv(xsize)));
 		PUSHs(sv_2mortal(newSViv(ysize)));
 
+#endif /* HAVE_RRD_GRAPH */
+
 SV *
 rrd_fetch(...)
 	PROTOTYPE: @	
@@ -313,6 +316,7 @@
 		PUSHs(sv_2mortal(newSVuv(start_tmp)));
 		PUSHs(sv_2mortal(newSVuv(end_tmp)));
 
+#ifdef HAVE_RRD_GRAPH
 int
 rrd_xport(...)
 	PROTOTYPE: @	
@@ -371,6 +375,8 @@
 		PUSHs(sv_2mortal(newRV_noinc((SV*)names)));
 		PUSHs(sv_2mortal(newRV_noinc((SV*)retar)));
 
+#endif /* HAVE_RRD_GRAPH */
+
 SV*
 rrd_info(...)
 	PROTOTYPE: @	
@@ -397,6 +403,7 @@
     OUTPUT:
 	   RETVAL
 
+#ifdef HAVE_RRD_GRAPH
 SV*
 rrd_graphv(...)
 	PROTOTYPE: @	
@@ -410,6 +417,8 @@
     OUTPUT:
 	   RETVAL
 
+#endif /* HAVE_RRD_GRAPH */
+
 int
 rrd_dump(...)
        PROTOTYPE: @
--- a/bindings/lua/rrdlua.c
+++ b/bindings/lua/rrdlua.c
@@ -267,6 +267,7 @@
   return 1;
 }
 
+#ifdef HAVE_RRD_GRAPH
 static int
 lua_rrd_graph (lua_State * L)
 {
@@ -291,6 +292,7 @@
   rrd_freemem(calcpr);
   return 3;
 }
+#endif /* HAVE_RRD_GRAPH */
 
 static int
 lua_rrd_flushcached(lua_State *L)
@@ -305,11 +307,13 @@
   return lua_rrd_infocall(L, "info", rrd_info);
 }
 
+#ifdef HAVE_RRD_GRAPH
 static int
 lua_rrd_graphv (lua_State * L)
 {
   return lua_rrd_infocall(L, "graphv", rrd_graph_v);
 }
+#endif /* HAVE_RRD_GRAPH */
 
 static int
 lua_rrd_updatev (lua_State * L)
@@ -347,7 +351,9 @@
   {"dump", lua_rrd_dump},
   {"fetch", lua_rrd_fetch},
   {"first", lua_rrd_first},
+#ifdef HAVE_RRD_GRAPH
   {"graph", lua_rrd_graph},
+#endif /* HAVE_RRD_GRAPH */
   {"last", lua_rrd_last},
   {"resize", lua_rrd_resize},
   {"restore", lua_rrd_restore},
@@ -357,7 +363,9 @@
 #if defined(DINF)
   {"info", lua_rrd_info},
   {"updatev", lua_rrd_updatev},
+#ifdef HAVE_RRD_GRAPH
   {"graphv", lua_rrd_graphv},
+#endif /* HAVE_RRD_GRAPH */
 #endif
   {NULL, NULL}
 };
--- a/bindings/python/rrdtoolmodule.c
+++ b/bindings/python/rrdtoolmodule.c
@@ -261,6 +261,7 @@
     return r;
 }
 
+#ifdef HAVE_RRD_GRAPH
 static char PyRRD_graph__doc__[] =
     "graph(args..): Create a graph based on data from one or several RRD\n"
     "    graph filename [-s|--start seconds] "
@@ -327,6 +328,7 @@
     destroy_args(&argv);
     return r;
 }
+#endif /* HAVE_RRD_GRAPH */
 
 static char PyRRD_tune__doc__[] =
     "tune(args...): Modify some basic properties of a Round Robin Database\n"
@@ -503,6 +505,7 @@
     return r;
 }
 
+#ifdef HAVE_RRD_GRAPH
 static char PyRRD_graphv__doc__[] =
     "graphv is called in the same manner as graph";
 
@@ -530,6 +533,7 @@
     destroy_args(&argv);
     return r;
 }
+#endif /* HAVE_RRD_GRAPH */
 
 static char PyRRD_updatev__doc__[] =
     "updatev is called in the same manner as update";
@@ -587,6 +591,7 @@
     return r;
 }
 
+#ifdef HAVE_RRD_GRAPH
 static char PyRRD_xport__doc__[] =
     "xport(args..): dictionary representation of data stored in RRDs\n"
     "    [-s|--start seconds] [-e|--end seconds] [-m|--maxrows rows]"
@@ -664,6 +669,7 @@
     destroy_args(&argv);
     return r;
 }
+#endif /* HAVE_RRD_GRAPH */
 
 /* List of methods defined in the module */
 #define meth(name, func, doc) {name, (PyCFunction)func, METH_VARARGS, doc}
@@ -672,16 +678,22 @@
     meth("create", PyRRD_create, PyRRD_create__doc__),
     meth("update", PyRRD_update, PyRRD_update__doc__),
     meth("fetch", PyRRD_fetch, PyRRD_fetch__doc__),
+#ifdef HAVE_RRD_GRAPH
     meth("graph", PyRRD_graph, PyRRD_graph__doc__),
+#endif /* HAVE_RRD_GRAPH */
     meth("tune", PyRRD_tune, PyRRD_tune__doc__),
     meth("first", PyRRD_first, PyRRD_first__doc__),
     meth("last", PyRRD_last, PyRRD_last__doc__),
     meth("resize", PyRRD_resize, PyRRD_resize__doc__),
     meth("info", PyRRD_info, PyRRD_info__doc__),
+#ifdef HAVE_RRD_GRAPH
     meth("graphv", PyRRD_graphv, PyRRD_graphv__doc__),
+#endif /* HAVE_RRD_GRAPH */
     meth("updatev", PyRRD_updatev, PyRRD_updatev__doc__),
     meth("flushcached", PyRRD_flushcached, PyRRD_flushcached__doc__),
+#ifdef HAVE_RRD_GRAPH
     meth("xport", PyRRD_xport, PyRRD_xport__doc__),
+#endif /* HAVE_RRD_GRAPH */
     {NULL, NULL, 0, NULL}
 };
 
--- a/src/rrd_cgi.c
+++ b/src/rrd_cgi.c
@@ -56,6 +56,7 @@
     const char **);
 
 /* call rrd_graph and insert appropriate image tag */
+#ifdef HAVE_RRD_GRAPH
 char     *drawgraph(
     long,
     const char **);
@@ -64,6 +65,7 @@
 char     *drawprint(
     long,
     const char **);
+#endif /* HAVE_RRD_GRAPH */
 
 /* pretty-print the <last></last> value for some.rrd via strftime() */
 char     *printtimelast(
@@ -542,9 +544,13 @@
         }
         parse(&buffer, i, "<RRD::GETVAR", rrdgetvar);
         parse(&buffer, i, "<RRD::GOODFOR", rrdgoodfor);
+#ifdef HAVE_RRD_GRAPH
         parse(&buffer, i, "<RRD::GRAPH", drawgraph);
+#endif /* HAVE_RRD_GRAPH */
         parse(&buffer, i, "<RRD::INCLUDE", includefile);
+#ifdef HAVE_RRD_GRAPH
         parse(&buffer, i, "<RRD::PRINT", drawprint);
+#endif /* HAVE_RRD_GRAPH */
         parse(&buffer, i, "<RRD::SETCONSTVAR", rrdsetvarconst);
         parse(&buffer, i, "<RRD::SETENV", rrdsetenv);
         parse(&buffer, i, "<RRD::SETVAR", rrdsetvar);
@@ -929,7 +935,7 @@
 }
 
 
-
+#ifdef HAVE_RRD_GRAPH
 char     *drawgraph(
     long argc,
     const char **args)
@@ -961,6 +967,7 @@
     }
     return NULL;
 }
+#endif /* HAVE_RRD_GRAPH */
 
 char     *drawprint(
     long argc,
