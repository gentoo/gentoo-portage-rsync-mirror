--- src/main/org/codehaus/aspectwerkz/connectivity/RemoteProxyServer.java.old	2013-09-30 02:03:20.703138370 +0100
+++ src/main/org/codehaus/aspectwerkz/connectivity/RemoteProxyServer.java	2013-09-30 05:49:54.768369910 +0100
@@ -7,9 +7,13 @@
  **************************************************************************************/
 package org.codehaus.aspectwerkz.connectivity;
 
-import EDU.oswego.cs.dl.util.concurrent.BoundedBuffer;
-import EDU.oswego.cs.dl.util.concurrent.LinkedQueue;
-import EDU.oswego.cs.dl.util.concurrent.PooledExecutor;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.RejectedExecutionHandler;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
 import org.codehaus.aspectwerkz.exception.WrappedRuntimeException;
 
 import java.io.FileInputStream;
@@ -152,7 +156,7 @@
     /**
      * The thread pool.
      */
-    private PooledExecutor m_threadPool = null;
+    private ThreadPoolExecutor m_threadPool = null;
 
     /**
      * The class loader to use.
@@ -262,13 +266,30 @@
                                          final int threadPoolInitSize,
                                          final int keepAliveTime,
                                          final boolean waitWhenBlocked) {
-        m_threadPool = new PooledExecutor(new BoundedBuffer(threadPoolInitSize), threadPoolMaxSize);
-        m_threadPool.setKeepAliveTime(keepAliveTime);
-        m_threadPool.createThreads(threadPoolInitSize);
-        m_threadPool.setMinimumPoolSize(threadPoolMinSize);
+        m_threadPool = new ThreadPoolExecutor(threadPoolInitSize, threadPoolMaxSize,
+					      keepAliveTime, TimeUnit.MILLISECONDS,
+					      new ArrayBlockingQueue(threadPoolInitSize) {
+		protected void afterExecute(Runnable r, ThreadPoolExecutor e) {
+		    if (waitWhenBlocked) e.notifyAll();
+		}
+	    });
+        m_threadPool.prestartAllCoreThreads();
+	m_threadPool.setCorePoolSize(threadPoolMinSize);
         if (waitWhenBlocked) {
-            m_threadPool.waitWhenBlocked();
-        }
+            m_threadPool.setRejectedExecutionHandler(new RejectedExecutionHandler() {
+		    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
+			if (e.isTerminating() || e.isTerminated())
+			    return;
+			BlockingQueue<Runnable> tasks = e.getQueue();
+			int maxSize = e.getMaximumPoolSize();
+			while (tasks.remainingCapacity() == 0 || e.getPoolSize() == maxSize)
+			    try { e.wait(); } catch (InterruptedException ex) {}
+			e.execute(r);
+		    }
+		});
+	} else {
+	    m_threadPool.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
+	}
     }
 
     /**
@@ -281,9 +302,10 @@
     private void createDynamicThreadPool(final int threadPoolMinSize,
                                          final int threadPoolInitSize,
                                          final int keepAliveTime) {
-        m_threadPool = new PooledExecutor(new LinkedQueue());
-        m_threadPool.setKeepAliveTime(keepAliveTime);
-        m_threadPool.createThreads(threadPoolInitSize);
-        m_threadPool.setMinimumPoolSize(threadPoolMinSize);
+        m_threadPool = new ThreadPoolExecutor(threadPoolInitSize, Integer.MAX_VALUE,
+					      keepAliveTime, TimeUnit.MILLISECONDS,
+					      new LinkedBlockingQueue());
+        m_threadPool.prestartAllCoreThreads();
+	m_threadPool.setCorePoolSize(threadPoolMinSize);
     }
-}
\ No newline at end of file
+}
