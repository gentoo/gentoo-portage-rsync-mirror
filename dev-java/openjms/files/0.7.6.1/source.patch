diff -urpN src.orig/main/org/exolab/jms/client/JmsQueueConnectionFactory.java src/main/org/exolab/jms/client/JmsQueueConnectionFactory.java
--- src.orig/main/org/exolab/jms/client/JmsQueueConnectionFactory.java	2005-02-06 12:47:40.872435800 +0100
+++ src/main/org/exolab/jms/client/JmsQueueConnectionFactory.java	2005-02-06 13:10:53.096785528 +0100
@@ -71,7 +71,17 @@ import org.exolab.jms.util.UUID;
 public class JmsQueueConnectionFactory
     extends JmsConnectionFactory
     implements QueueConnectionFactory, Externalizable, Referenceable {
+	
+    public javax.jms.Connection createConnection(java.lang.String foo, java.lang.String bar) throws javax.jms.JMSException
+    {
+    	return null;
+    }
 
+    public javax.jms.Connection createConnection() throws javax.jms.JMSException
+    {
+	    return null;
+    }
+	    
     /**
      * Used for serialization
      */
diff -urpN src.orig/main/org/exolab/jms/client/JmsQueueConnection.java src/main/org/exolab/jms/client/JmsQueueConnection.java
--- src.orig/main/org/exolab/jms/client/JmsQueueConnection.java	2005-02-06 12:47:40.871435952 +0100
+++ src/main/org/exolab/jms/client/JmsQueueConnection.java	2005-02-06 13:29:03.996943496 +0100
@@ -66,6 +66,36 @@ import javax.jms.Session;
  */
 class JmsQueueConnection extends JmsConnection implements QueueConnection {
 
+   public javax.jms.ConnectionConsumer createDurableConnectionConsumer(
+		  javax.jms.Topic arg1, 
+		  java.lang.String arg2, 
+		  java.lang.String arg3, 
+		  javax.jms.ServerSessionPool arg4, 
+		  int arg5) 
+	   throws javax.jms.JMSException 
+   {
+	return null;
+   }
+
+
+   public javax.jms.ConnectionConsumer createConnectionConsumer(
+		   javax.jms.Destination arg1, 
+		   java.lang.String arg2, 
+		   javax.jms.ServerSessionPool arg3, 
+		   int arg4)
+	   throws javax.jms.JMSException
+   {
+	return null;
+   }
+
+   public javax.jms.Session createSession(
+		   boolean arg1, 
+		   int arg2)
+	   throws javax.jms.JMSException
+   {
+	return null;
+   }
+   
     /**
      * Construct a new <code>JmsQueueConnection</code>
      * <p>
diff -urpN src.orig/main/org/exolab/jms/client/JmsQueueSender.java src/main/org/exolab/jms/client/JmsQueueSender.java
--- src.orig/main/org/exolab/jms/client/JmsQueueSender.java	2005-02-06 12:47:40.861437472 +0100
+++ src/main/org/exolab/jms/client/JmsQueueSender.java	2005-02-06 14:14:35.009766440 +0100
@@ -61,6 +61,21 @@ class JmsQueueSender
     extends JmsMessageProducer
     implements QueueSender {
 
+	public void send(javax.jms.Destination arg1, javax.jms.Message arg2, int arg3, int arg4, long arg5) throws javax.jms.JMSException
+	{
+
+	}
+
+	public void send(javax.jms.Destination arg1, javax.jms.Message arg2) throws javax.jms.JMSException
+	{
+
+	}
+
+	public javax.jms.Destination getDestination() throws javax.jms.JMSException
+	{
+	return null;
+	}
+    
     /**
      * The destination that messages are delivered to, or <code>null</code>
      * if this is an unidentified producer
diff -urpN src.orig/main/org/exolab/jms/client/JmsQueueSession.java src/main/org/exolab/jms/client/JmsQueueSession.java
--- src.orig/main/org/exolab/jms/client/JmsQueueSession.java	2005-02-06 12:47:40.858437928 +0100
+++ src/main/org/exolab/jms/client/JmsQueueSession.java	2005-02-06 14:06:53.431936936 +0100
@@ -62,6 +62,54 @@ class JmsQueueSession
     extends JmsSession
     implements QueueSession {
 
+    public void unsubscribe(java.lang.String foo) {
+
+    }
+    
+	public javax.jms.TemporaryTopic createTemporaryTopic() throws javax.jms.JMSException
+	{
+		return null;
+	}
+    
+	public javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic arg1, java.lang.String arg2, java.lang.String arg3, boolean arg4) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.Topic createTopic(java.lang.String arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2, boolean arg3) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+	
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageProducer createProducer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+	
+	public int getAcknowledgeMode() throws javax.jms.JMSException
+	{
+		return 0;
+	}
     /**
      * Construct a new <code>JmsQueueSession</code>
      *
diff -urpN src.orig/main/org/exolab/jms/client/JmsTopicConnectionFactory.java src/main/org/exolab/jms/client/JmsTopicConnectionFactory.java
--- src.orig/main/org/exolab/jms/client/JmsTopicConnectionFactory.java	2005-02-06 12:47:40.875435344 +0100
+++ src/main/org/exolab/jms/client/JmsTopicConnectionFactory.java	2005-02-06 13:10:40.678673368 +0100
@@ -74,6 +74,16 @@ public class JmsTopicConnectionFactory
     extends JmsConnectionFactory
     implements TopicConnectionFactory, Externalizable, Referenceable {
 
+    public javax.jms.Connection createConnection(java.lang.String foo, java.lang.String bar) throws javax.jms.JMSException
+    {
+	return null;
+    }
+   
+    public javax.jms.Connection createConnection() throws javax.jms.JMSException
+    {
+	    return null;
+    }
+    
     /**
      * Used for serialization
      */
diff -urpN src.orig/main/org/exolab/jms/client/JmsTopicConnection.java src/main/org/exolab/jms/client/JmsTopicConnection.java
--- src.orig/main/org/exolab/jms/client/JmsTopicConnection.java	2005-02-06 12:47:40.859437776 +0100
+++ src/main/org/exolab/jms/client/JmsTopicConnection.java	2005-02-06 13:35:16.906252664 +0100
@@ -64,7 +64,24 @@ import javax.jms.TopicSession;
  */
 class JmsTopicConnection extends JmsConnection implements TopicConnection {
 
-    /**
+   public javax.jms.ConnectionConsumer createConnectionConsumer(
+		  javax.jms.Destination arg1, 
+		  java.lang.String arg2, 
+		  javax.jms.ServerSessionPool arg3, 
+		  int arg4) 
+	   throws javax.jms.JMSException 
+   {
+	return null;
+   }
+   
+   public javax.jms.Session createSession(
+		   boolean arg1, 
+		   int arg2)
+	   throws javax.jms.JMSException
+   {
+	return null;
+   }
+	/**
      * Construct a new <code>JmsTopicConnection</code>
      * <p>
      * This attempts to establish a connection to the JMS server
diff -urpN src.orig/main/org/exolab/jms/client/JmsTopicPublisher.java src/main/org/exolab/jms/client/JmsTopicPublisher.java
--- src.orig/main/org/exolab/jms/client/JmsTopicPublisher.java	2005-02-06 12:47:40.872435800 +0100
+++ src/main/org/exolab/jms/client/JmsTopicPublisher.java	2005-02-06 14:22:40.031032000 +0100
@@ -60,6 +60,26 @@ class JmsTopicPublisher
     extends JmsMessageProducer
     implements TopicPublisher {
 
+	public void send(javax.jms.Destination arg1, javax.jms.Message arg2, int arg3, int arg4, long arg5) throws javax.jms.JMSException
+	{
+	}
+
+	public void send(javax.jms.Destination arg1, javax.jms.Message arg2) throws javax.jms.JMSException
+	{
+	}
+
+	public void send(javax.jms.Message arg1, int arg2, int arg3, long arg4) throws javax.jms.JMSException
+	{
+	}
+		
+	public void send(javax.jms.Message arg1) throws javax.jms.JMSException
+	{
+	}
+
+	public javax.jms.Destination getDestination() throws javax.jms.JMSException
+	{
+		return null;
+	}
     /**
      * The destination that messages are delivered to, or <code>null</code>
      * if this is an unidentified producer
diff -urpN src.orig/main/org/exolab/jms/client/JmsTopicSession.java src/main/org/exolab/jms/client/JmsTopicSession.java
--- src.orig/main/org/exolab/jms/client/JmsTopicSession.java	2005-02-06 12:47:40.861437472 +0100
+++ src/main/org/exolab/jms/client/JmsTopicSession.java	2005-02-06 14:19:47.998184968 +0100
@@ -64,6 +64,51 @@ class JmsTopicSession
     extends JmsSession
     implements TopicSession {
 
+    public javax.jms.TemporaryQueue createTemporaryQueue() throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.QueueBrowser createBrowser(javax.jms.Queue arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+    
+	public javax.jms.QueueBrowser createBrowser(javax.jms.Queue arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.Queue createQueue(java.lang.String arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2, boolean arg3) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageProducer createProducer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+	
+	public int getAcknowledgeMode() throws javax.jms.JMSException
+	{
+		return 0;
+	}
+	
     /**
      * This set maintains the list of active durable subscriber names for the
      * session. Durable subscriber names must be unique within the session
diff -urpN src.orig/main/org/exolab/jms/client/JmsXAQueueConnectionFactory.java src/main/org/exolab/jms/client/JmsXAQueueConnectionFactory.java
--- src.orig/main/org/exolab/jms/client/JmsXAQueueConnectionFactory.java	2005-02-06 12:47:40.862437320 +0100
+++ src/main/org/exolab/jms/client/JmsXAQueueConnectionFactory.java	2005-02-06 14:25:51.399939504 +0100
@@ -75,6 +75,16 @@ public class JmsXAQueueConnectionFactory
     extends JmsQueueConnectionFactory
     implements XAQueueConnectionFactory, Externalizable, Referenceable {
 
+	public javax.jms.XAConnection createXAConnection(java.lang.String arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.XAConnection createXAConnection() throws javax.jms.JMSException
+	{
+		return null;
+	}
+    
     /**
      * This is used to mark the serializable version of this class
      */
diff -urpN src.orig/main/org/exolab/jms/client/JmsXAQueueConnection.java src/main/org/exolab/jms/client/JmsXAQueueConnection.java
--- src.orig/main/org/exolab/jms/client/JmsXAQueueConnection.java	2005-02-06 12:47:40.860437624 +0100
+++ src/main/org/exolab/jms/client/JmsXAQueueConnection.java	2005-02-06 14:28:10.934726992 +0100
@@ -67,6 +67,11 @@ public class JmsXAQueueConnection
     extends JmsQueueConnection
     implements XAQueueConnection {
 
+	public javax.jms.XASession createXASession() throws javax.jms.JMSException
+	{
+		return null;
+	}
+    
     /**
      * Instantiate an instance of this connection using the specified client
      * identity. The client identity is immutable and once set cannot be
diff -urpN src.orig/main/org/exolab/jms/client/JmsXAQueueSession.java src/main/org/exolab/jms/client/JmsXAQueueSession.java
--- src.orig/main/org/exolab/jms/client/JmsXAQueueSession.java	2005-02-06 12:47:40.870436104 +0100
+++ src/main/org/exolab/jms/client/JmsXAQueueSession.java	2005-02-06 14:33:42.182369696 +0100
@@ -68,6 +68,57 @@ public class JmsXAQueueSession
     extends JmsQueueSession
     implements XAQueueSession, XAResource {
 
+	public javax.jms.TemporaryTopic createTemporaryTopic() throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic arg1, java.lang.String arg2, java.lang.String arg3, boolean arg4) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+   
+	public javax.jms.Topic createTopic(java.lang.String $1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2, boolean arg3) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2) throws javax.jms.JMSException 
+	{
+		return null;
+	}
+	
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageProducer createProducer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public int getAcknowledgeMode() throws javax.jms.JMSException
+	{
+		return 0;
+	}
+
+	public javax.jms.Session getSession() throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	
     /**
      * caches the resource manager id, which is globally unique so that a test
      * through {@link #isSameRM} doesn't have to go across the wire.
diff -urpN src.orig/main/org/exolab/jms/client/JmsXATopicConnectionFactory.java src/main/org/exolab/jms/client/JmsXATopicConnectionFactory.java
--- src.orig/main/org/exolab/jms/client/JmsXATopicConnectionFactory.java	2005-02-06 12:47:40.870436104 +0100
+++ src/main/org/exolab/jms/client/JmsXATopicConnectionFactory.java	2005-02-06 13:42:52.978919080 +0100
@@ -75,6 +75,16 @@ public class JmsXATopicConnectionFactory
     extends JmsTopicConnectionFactory
     implements XATopicConnectionFactory, Externalizable, Referenceable {
 
+	public javax.jms.XAConnection createXAConnection(java.lang.String arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.XAConnection createXAConnection() throws javax.jms.JMSException
+	{
+		return null;
+	}
+    
     /**
      * This is used to mark the serializable version of this class
      */
diff -urpN src.orig/main/org/exolab/jms/client/JmsXATopicConnection.java src/main/org/exolab/jms/client/JmsXATopicConnection.java
--- src.orig/main/org/exolab/jms/client/JmsXATopicConnection.java	2005-02-06 12:47:40.876435192 +0100
+++ src/main/org/exolab/jms/client/JmsXATopicConnection.java	2005-02-06 14:31:50.514345816 +0100
@@ -67,6 +67,11 @@ public class JmsXATopicConnection
     extends JmsTopicConnection
     implements XATopicConnection {
 
+	public javax.jms.XASession createXASession() throws javax.jms.JMSException
+	{
+		return null;
+	}
+    
     /**
      * Instantiate an instance of this connection using the specified client
      * identity. The client identity is immutable and once set cannot be
diff -urpN src.orig/main/org/exolab/jms/client/JmsXATopicSession.java src/main/org/exolab/jms/client/JmsXATopicSession.java
--- src.orig/main/org/exolab/jms/client/JmsXATopicSession.java	2005-02-06 12:47:40.873435648 +0100
+++ src/main/org/exolab/jms/client/JmsXATopicSession.java	2005-02-06 14:33:58.760849384 +0100
@@ -68,6 +68,57 @@ public class JmsXATopicSession
     extends JmsTopicSession
     implements XATopicSession, XAResource {
 
+	public javax.jms.TemporaryQueue createTemporaryQueue() throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.QueueBrowser createBrowser(javax.jms.Queue arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.QueueBrowser createBrowser(javax.jms.Queue arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.Queue createQueue(java.lang.String arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2, boolean arg3) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1, java.lang.String arg2) throws javax.jms.JMSException
+	{
+		return null;
+	}
+	
+	public javax.jms.MessageConsumer createConsumer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public javax.jms.MessageProducer createProducer(javax.jms.Destination arg1) throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+	public int getAcknowledgeMode() throws javax.jms.JMSException
+	{
+		return 0;
+	}
+
+	public javax.jms.Session getSession() throws javax.jms.JMSException
+	{
+		return null;
+	}
+
+
     /**
      * caches the resource manager id, which is globally unique so that a test
      * through {@link #isSameRM} doesn't have to go across the wire.
diff -urpN src.orig/main/org/exolab/jms/config/ConnectorHelper.java src/main/org/exolab/jms/config/ConnectorHelper.java
--- src.orig/main/org/exolab/jms/config/ConnectorHelper.java	2005-02-06 12:47:40.878434888 +0100
+++ src/main/org/exolab/jms/config/ConnectorHelper.java	2005-02-06 13:54:00.980367424 +0100
@@ -136,7 +136,7 @@ public class ConnectorHelper {
         try {
             ConnectorResources connectors = null;
             stream = ConnectorHelper.class.getResourceAsStream(RESOURCE);
-            connectors = ConnectorResources.unmarshal(
+            connectors = (ConnectorResources) ConnectorResources.unmarshal(
                 new InputStreamReader(stream));
             _connectors = connectors.getConnectorResource();
         } catch (Exception exception) {
diff -urpN src.orig/main/org/exolab/jms/message/BytesMessageImpl.java src/main/org/exolab/jms/message/BytesMessageImpl.java
--- src.orig/main/org/exolab/jms/message/BytesMessageImpl.java	2005-02-06 12:47:40.841440512 +0100
+++ src/main/org/exolab/jms/message/BytesMessageImpl.java	2005-02-06 12:56:42.857041616 +0100
@@ -77,6 +77,10 @@ import javax.jms.MessageNotWriteableExce
 public final class BytesMessageImpl extends MessageImpl
     implements BytesMessage {
 
+    public long getBodyLength() throws javax.jms.JMSException {
+   	return (long) 0;
+    }
+    
     /**
      * Object version no. for serialization
      */
diff -urpN src.orig/main/org/exolab/jms/tools/db/SchemaHelper.java src/main/org/exolab/jms/tools/db/SchemaHelper.java
--- src.orig/main/org/exolab/jms/tools/db/SchemaHelper.java	2005-02-06 12:47:40.828442488 +0100
+++ src/main/org/exolab/jms/tools/db/SchemaHelper.java	2005-02-06 14:35:46.295501632 +0100
@@ -152,7 +152,7 @@ public class SchemaHelper {
                 path);
         }
         try {
-            schema = Database.unmarshal(new InputStreamReader(stream));
+            schema = (Database) Database.unmarshal(new InputStreamReader(stream));
         } catch (MarshalException exception) {
             throw new PersistenceException(exception.getMessage());
         } catch (ValidationException exception) {
@@ -169,7 +169,7 @@ public class SchemaHelper {
                 SCHEMA);
         }
         try {
-            schema = Database.unmarshal(new InputStreamReader(stream));
+            schema = (Database) Database.unmarshal(new InputStreamReader(stream));
         } catch (MarshalException exception) {
             throw new PersistenceException(exception.getMessage());
         } catch (ValidationException exception) {
